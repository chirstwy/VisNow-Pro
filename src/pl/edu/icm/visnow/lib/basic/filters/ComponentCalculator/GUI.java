/* VisNow
 Copyright (C) 2006-2013 University of Warsaw, ICM

 This file is part of GNU Classpath.

 GNU Classpath is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.

 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the 
 University of Warsaw, Interdisciplinary Centre for Mathematical and 
 Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
 conditions of the GNU General Public License cover the whole
 combination.

 As a special exception, the copyright holders of this library give you
 permission to link this library with independent modules to produce an
 executable, regardless of the license terms of these independent
 modules, and to copy and distribute the resulting executable under
 terms of your choice, provided that you also meet, for each linked
 independent module, the terms and conditions of the license of that
 module.  An independent module is a module which is not derived from
 or based on this library.  If you modify this library, you may extend
 this exception to your version of the library, but you are not
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
package pl.edu.icm.visnow.lib.basic.filters.ComponentCalculator;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;
import pl.edu.icm.visnow.datasets.Field;
import pl.edu.icm.visnow.lib.utils.expressions.ArrayExpressionParser;

/**
 *
 * @author Bartosz Borucki (babor@icm.edu.pl), University of Warsaw, ICM
 *
 */
public class GUI extends javax.swing.JPanel {

    private Params params = new Params();
    private Field inField = null;
    private boolean silent = false;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        generatorPanel = new javax.swing.JPanel();
        dim1RB = new javax.swing.JRadioButton();
        dim2RB = new javax.swing.JRadioButton();
        dim3RB = new javax.swing.JRadioButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        genTable = new javax.swing.JTable();
        listPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        compTable = new javax.swing.JTable();
        exprPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        spRB = new javax.swing.JRadioButton();
        dpRB = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        exprTextPanel = new javax.swing.JTextPane();
        computeButton = new javax.swing.JButton();
        retainCB = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        infoTextPanel = new javax.swing.JTextPane();

        setMinimumSize(new java.awt.Dimension(200, 600));
        setPreferredSize(new java.awt.Dimension(200, 600));
        setLayout(new java.awt.GridBagLayout());

        generatorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "field generator", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11))); // NOI18N
        generatorPanel.setMinimumSize(new java.awt.Dimension(200, 120));
        generatorPanel.setPreferredSize(new java.awt.Dimension(200, 120));
        generatorPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(dim1RB);
        dim1RB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        dim1RB.setText("1D");
        dim1RB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dim1RBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        generatorPanel.add(dim1RB, gridBagConstraints);

        buttonGroup1.add(dim2RB);
        dim2RB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        dim2RB.setText("2D");
        dim2RB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dim2RBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        generatorPanel.add(dim2RB, gridBagConstraints);

        buttonGroup1.add(dim3RB);
        dim3RB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        dim3RB.setSelected(true);
        dim3RB.setText("3D");
        dim3RB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dim3RBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        generatorPanel.add(dim3RB, gridBagConstraints);

        genTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "dim", "size", "min", "max"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(genTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        generatorPanel.add(jScrollPane4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(generatorPanel, gridBagConstraints);

        listPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "variables", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11))); // NOI18N
        listPanel.setMinimumSize(new java.awt.Dimension(200, 200));
        listPanel.setPreferredSize(new java.awt.Dimension(200, 200));
        listPanel.setRequestFocusEnabled(false);
        listPanel.setLayout(new java.awt.BorderLayout());

        compTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "component", "veclen", "alias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(compTable);

        listPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(listPanel, gridBagConstraints);

        exprPanel.setLayout(new java.awt.GridBagLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(200, 20));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jLabel3.setText("Precision:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(jLabel3, gridBagConstraints);

        buttonGroup2.add(spRB);
        spRB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        spRB.setSelected(true);
        spRB.setText("single");
        spRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(spRB, gridBagConstraints);

        buttonGroup2.add(dpRB);
        dpRB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        dpRB.setText("double");
        dpRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dpRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(dpRB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        exprPanel.add(jPanel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jLabel2.setText("Expression(s):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        exprPanel.add(jLabel2, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(30, 102));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(82, 102));
        jScrollPane2.setRequestFocusEnabled(false);

        exprTextPanel.setText("result = expr");
        jScrollPane2.setViewportView(exprTextPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        exprPanel.add(jScrollPane2, gridBagConstraints);

        computeButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        computeButton.setText("Evaluate");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        exprPanel.add(computeButton, gridBagConstraints);

        retainCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        retainCB.setText("retain input components");
        retainCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retainCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        exprPanel.add(retainCB, gridBagConstraints);

        jScrollPane3.setBorder(null);

        infoTextPanel.setEditable(false);
        infoTextPanel.setBackground(new java.awt.Color(238, 238, 238));
        infoTextPanel.setForeground(new java.awt.Color(255, 0, 0));
        jScrollPane3.setViewportView(infoTextPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        exprPanel.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(exprPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
        params.setExpressions(exprTextPanel.getText().split("\n"));
        infoTextPanel.setText("");
        fireStateChanged();
    }//GEN-LAST:event_computeButtonActionPerformed

    private void spRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spRBActionPerformed
        params.setPrecision(ArrayExpressionParser.PRECISION_SINGLE);
    }//GEN-LAST:event_spRBActionPerformed

    private void dpRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpRBActionPerformed
        params.setPrecision(ArrayExpressionParser.PRECISION_DOUBLE);
    }//GEN-LAST:event_dpRBActionPerformed

    private void retainCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retainCBActionPerformed
        params.setRetainComponents(retainCB.isSelected());
    }//GEN-LAST:event_retainCBActionPerformed

    private void dim1RBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dim1RBActionPerformed
        updateGenTable();
    }//GEN-LAST:event_dim1RBActionPerformed

    private void dim2RBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dim2RBActionPerformed
        updateGenTable();
    }//GEN-LAST:event_dim2RBActionPerformed

    private void dim3RBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dim3RBActionPerformed
        updateGenTable();
    }//GEN-LAST:event_dim3RBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTable compTable;
    private javax.swing.JButton computeButton;
    private javax.swing.JRadioButton dim1RB;
    private javax.swing.JRadioButton dim2RB;
    private javax.swing.JRadioButton dim3RB;
    private javax.swing.JRadioButton dpRB;
    private javax.swing.JPanel exprPanel;
    private javax.swing.JTextPane exprTextPanel;
    private javax.swing.JTable genTable;
    private javax.swing.JPanel generatorPanel;
    private javax.swing.JTextPane infoTextPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel listPanel;
    private javax.swing.JCheckBox retainCB;
    private javax.swing.JRadioButton spRB;
    // End of variables declaration//GEN-END:variables
    private int[] dims = new int[]{50, 50, 50};
    private float[][] ext = new float[][]{{-.5f, -.5f, -.5f}, {.5f, .5f, .5f}};

    public void setParams(Params params) {
        this.params = params;
        dims = new int [params.getDims().length];
        ext = new float[2][3];
        for (int i = 0; i < dims.length; i++) {
            dims[i] = params.getDims()[i];
            ext[0][i] = params.getExtents()[0][i];
            ext[1][i] = params.getExtents()[1][i];            
        }
        updateGUI();
    }

    public void setInField(Field field) {
        this.inField = field;
        updateGUI();
    }
    private static final String[] columnNames = new String[]{"component", "veclen", "alias"};
    private TableModelListener aliasesTml = new TableModelListener() {
        @Override
        public void tableChanged(TableModelEvent e) {
            String[] aliases = new String[compTable.getModel().getRowCount()];
            for (int i = 0; i < aliases.length; i++) {
                aliases[i] = (String) compTable.getModel().getValueAt(i, 2);
            }
            params.setAliases(aliases);
        }
    };
    private TableModelListener genTbl = new TableModelListener() {
        @Override
        public void tableChanged(TableModelEvent e) {
            int nDims = (dim3RB.isSelected()?3:(dim2RB.isSelected()?2:1));
            float[][] extents = new float[][]{{0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}};
            for (int i = 0; i < nDims; i++) {
                extents[0][i] = ext[0][i];
                extents[1][i] = ext[1][i];
            }

            int[] dim = new int[nDims];
            for (int i = 0; i < nDims; i++) {
                dim[i] = dims[i];
            }
            params.setDims(dim);
            params.setExtents(extents);
        }
    };

    private void updateGUI() {
        boolean oldSilent = silent;
        infoTextPanel.setText("");

        silent = true;
        if (inField == null) {
            listPanel.setVisible(false);
            generatorPanel.setVisible(true);
            retainCB.setVisible(false);
            switch(params.getDims().length) {
                case 3:
                    dim3RB.setSelected(true);
                    break;
                case 2:
                    dim2RB.setSelected(true);
                    break;
                case 1:
                    dim1RB.setSelected(true);
                    break;                    
            }
            updateGenTable();
            silent = oldSilent;
            return;
        }

        generatorPanel.setVisible(false);
        retainCB.setVisible(true);
        listPanel.setVisible(true);
        Object[][] tableData = new Object[inField.getNData()][3];
        String[] aliases = params.getAliases();
        for (int i = 0; i < inField.getNData(); i++) {
            tableData[i][0] = inField.getData(i).getName();
            tableData[i][1] = inField.getData(i).getVeclen();
            tableData[i][2] = aliases[i];
        }

        if (compTable.getModel() != null) {
            compTable.getModel().removeTableModelListener(aliasesTml);
        }

        compTable.setModel(new javax.swing.table.DefaultTableModel(tableData, columnNames) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return (columnIndex == 2);
            }
        });
        compTable.getColumnModel().getColumn(0).setPreferredWidth(120);
        compTable.getModel().addTableModelListener(aliasesTml);

        String[] expr = params.getExpressions();
        String tmp = "";
        if (expr != null) {
            for (int i = 0; i < expr.length; i++) {
                tmp += expr[i] + "\n";
            }
            exprTextPanel.setText(tmp);
        }


        retainCB.setSelected(params.isRetainComponents());
        if (params.getPrecision() == ArrayExpressionParser.PRECISION_SINGLE) {
            spRB.setSelected(true);
        } else {
            dpRB.setSelected(true);
        }

        silent = oldSilent;
    }
    /**
     * Utility field holding list of ChangeListeners.
     */
    protected transient ArrayList<ChangeListener> changeListenerList = new ArrayList<ChangeListener>();

    /**
     * Registers ChangeListener to receive events.
     *
     * @param listener The listener to register.
     */
    public synchronized void addChangeListener(ChangeListener listener) {
        changeListenerList.add(listener);
    }

    /**
     * Removes ChangeListener from the list of listeners.
     *
     * @param listener The listener to remove.
     */
    public synchronized void removeChangeListener(ChangeListener listener) {
        changeListenerList.remove(listener);
    }

    /**
     * Notifies all registered listeners about the event.
     *
     * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
     */
    public void fireStateChanged() {
        if (silent) {
            return;
        }
        ChangeEvent e = new ChangeEvent(this);
        for (int i = 0; i < changeListenerList.size(); i++) {
            changeListenerList.get(i).stateChanged(e);
        }
    }

    public void setInfoText(String text) {
        infoTextPanel.setText(text);
    }

    private void updateGenTable() {
        if(genTable.getModel() != null)
            genTable.getModel().removeTableModelListener(genTbl);
        
        genTable.setModel(new AbstractTableModel() {
            @Override
            public int getRowCount() {
                if (dim1RB.isSelected()) {
                    return 1;
                }
                if (dim2RB.isSelected()) {
                    return 2;
                }
                return 3;
            }
            
            String[] columnNames = {"dim", "size", "min", "max"};

            @Override
            public String getColumnName(int index) {
                return columnNames[index];
            }

            @Override
            public int getColumnCount() {
                return 4;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                switch (columnIndex) {
                    case 0:
                        switch (rowIndex) {
                            case 0:
                                return "x";
                            case 1:
                                return "y";
                            case 2:
                                return "z";
                        }
                    case 1:
                        return "" + dims[rowIndex];
                    case 2:
                        return "" + ext[0][rowIndex];
                    case 3:
                        return "" + ext[1][rowIndex];
                }
                return null;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return (columnIndex != 0);
            }

            @Override
            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                switch (columnIndex) {
                    case 1:
                        try {
                            dims[rowIndex] = Integer.parseInt((String) aValue);
                            if (dims[rowIndex] < 3) {
                                dims[rowIndex] = 3;
                            }
                        } catch (NumberFormatException ex) {
                            dims[rowIndex] = Integer.parseInt((String) getValueAt(rowIndex, columnIndex));
                        }
                        break;
                    case 2:
                        try {
                            ext[0][rowIndex] = Float.parseFloat((String) aValue);
                        } catch (NumberFormatException ex) {
                            ext[0][rowIndex] = Float.parseFloat((String) getValueAt(rowIndex, columnIndex));
                        }
                        break;
                    case 3:
                        try {
                            ext[1][rowIndex] = Float.parseFloat((String) aValue);
                        } catch (NumberFormatException ex) {
                            ext[1][rowIndex] = Float.parseFloat((String) getValueAt(rowIndex, columnIndex));
                        }
                        break;
                }
                fireTableChanged(new TableModelEvent(this, rowIndex, rowIndex, columnIndex));
            }
        });
        genTable.getModel().addTableModelListener(genTbl);
        genTbl.tableChanged(new TableModelEvent(genTable.getModel(), 0, 0, 0));
    }
    
    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.add(new GUI());
        f.pack();
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        f.setVisible(true);                
    }
}
