///<editor-fold defaultstate="collapsed" desc=" COPYRIGHT AND LICENSE ">
/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
University of Warsaw, Interdisciplinary Centre for Mathematical and
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */
//</editor-fold>

package pl.edu.icm.visnow.lib.basic.utilities.Annotations;

import java.io.File;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import pl.edu.icm.visnow.lib.utils.SwingInstancer;
import pl.edu.icm.visnow.system.main.VisNow;
import pl.edu.icm.visnow.system.swing.filechooser.VNFileChooser;

/**
 *
 * @author Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends javax.swing.JPanel
{
   public class MyTableModelListener implements TableModelListener
   {

      JTable table;

      // It is necessary to keep the table since it is not possible
      // to determine the table from the event's source
      MyTableModelListener(JTable table)
      {
         this.table = table;
      }

      @Override
      public void tableChanged(TableModelEvent e)
      {
         updateParams();
      }
   }
   private Params params = new Params();
   private float[] coords = null;
   private String[] texts = null;
   private float smax = 1;
   private static final int[] annoColumnWidth = new int[]
   {
      140, 20,20,20
   };
   private DefaultTableModel annotationTableModel;
   private String[] annotationTableHeader = new String[]{"text", "x", "y", "z"};
   private Object[][] annotationTableContent = null;
   private String path = null;
   private String lastPath = null;
   private JFileChooser fileChooser = new JFileChooser();

   /**
    * Creates new form GUI
    */
   public GUI()
   {
      initComponents();
      for (int i = 1; i < annoColumnWidth.length; i++)
         annoTable.getColumnModel().getColumn(i).setPreferredWidth(annoColumnWidth[i]);
      annoTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
      annotationTableModel = (DefaultTableModel)annoTable.getModel();
      annotationTableModel.addTableModelListener(new MyTableModelListener(annoTable));
   
      annoTable.getTableHeader().setReorderingAllowed(false);
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        activateBox = new javax.swing.JCheckBox();
        infoLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        annoTable = new javax.swing.JTable();
        delButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        fontGUI = new pl.edu.icm.visnow.geometries.gui.FontGUI();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        activateBox.setText("active");
        activateBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(activateBox, gridBagConstraints);

        infoLabel.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        infoLabel.setForeground(new java.awt.Color(0, 0, 0));
        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText("Add points by clicking in the 3D viewer window");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(infoLabel, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setToolTipText("Add points by clicking in the 3D viewer window");
        jScrollPane1.setMinimumSize(new java.awt.Dimension(150, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(191, 250));

        annoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "text", "x", "y", "z"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        annoTable.setToolTipText("Add points by clicking in the 3D viewer window");
        annoTable.setOpaque(false);
        jScrollPane1.setViewportView(annoTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane1, gridBagConstraints);

        delButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        delButton.setText("delete selected annotations");
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(delButton, gridBagConstraints);

        clearButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        clearButton.setText("delete all annotations");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(clearButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        add(jPanel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(fontGUI, gridBagConstraints);

        saveButton.setText("save annotations");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(saveButton, gridBagConstraints);

        loadButton.setText("load annotations");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(loadButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weighty = 1.0;
        add(filler1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void delButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_delButtonActionPerformed
   {//GEN-HEADEREND:event_delButtonActionPerformed
       int[] selectedRows;
       selectedRows = annoTable.getSelectedRows();

       if (selectedRows.length > 0)
       {
           Arrays.sort(selectedRows);
           
           float[] oldCoords = params.getCoords();
           String[] oldTexts = params.getTexts();
           
           coords = new float[oldCoords.length - 3 * selectedRows.length];
           texts = new String[oldTexts.length - selectedRows.length];
           
           int indexToDelete = 0;
           int indexNewTexts = 0;
           
           for (int i = 0; i < oldTexts.length; ++i)
           {
               if (indexToDelete >= selectedRows.length)
               {
                   texts[indexNewTexts] = oldTexts[i];
                   for (int k = 0; k < 3; ++k)
                       coords[3 * indexNewTexts + k] = oldCoords[3 * i + k];
                   ++indexNewTexts;
               }
               else /* Still some points to delete. */
               {
                   if (i != selectedRows[indexToDelete])
                   {
                       texts[indexNewTexts] = oldTexts[i];
                       for (int k = 0; k < 3; ++k)
                            coords[3 * indexNewTexts + k] = oldCoords[3 * i + k];
                       ++indexNewTexts;
                   }
                   else
                       ++indexToDelete;
               }
           }
           
           params.setTexts(texts);
           params.setCoords(coords);

           if (texts.length == 0)
             infoLabel.setVisible(true);
           
           update();
       }
   }//GEN-LAST:event_delButtonActionPerformed

   private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
   {//GEN-HEADEREND:event_clearButtonActionPerformed
      params.setTexts(new String[]{});
      params.setCoords(new float[]{});
      
      infoLabel.setVisible(true);
      
      update();
   }//GEN-LAST:event_clearButtonActionPerformed

   /**
    * 
    * @param evt not used, may be null
    */
   private void activateBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_activateBoxActionPerformed
   {//GEN-HEADEREND:event_activateBoxActionPerformed
      params.getPick3DListener().setActive(activateBox.isSelected());
   }//GEN-LAST:event_activateBoxActionPerformed
   
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (lastPath == null)
            fileChooser.setCurrentDirectory(new File(VisNow.get().getMainConfig().getDataWriterPath()));
        else
            fileChooser.setCurrentDirectory(new File(lastPath));
        FileNameExtensionFilter fieldFilter = new FileNameExtensionFilter("Annotation files", "anno", "ANNO");
        fileChooser.setFileFilter(fieldFilter);

        int returnVal = fileChooser.showDialog(this, "Select");
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            path = VNFileChooser.filenameWithExtenstionAddedIfNecessary(fileChooser.getSelectedFile(), new FileNameExtensionFilter("anno", "ANNO"));
            lastPath = path.substring(0, path.lastIndexOf(File.separator));
            params.setOutput(path);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

   private void loadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadButtonActionPerformed
   {//GEN-HEADEREND:event_loadButtonActionPerformed
        if (lastPath == null)
            fileChooser.setCurrentDirectory(new File(VisNow.get().getMainConfig().getDataWriterPath()));
        else
            fileChooser.setCurrentDirectory(new File(lastPath));
        FileNameExtensionFilter fieldFilter = new FileNameExtensionFilter("Annotation files", "anno", "ANNO");
        fileChooser.setFileFilter(fieldFilter);

        int returnVal = fileChooser.showDialog(this, "Select");
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            path = VNFileChooser.filenameWithExtenstionAddedIfNecessary(fileChooser.getSelectedFile(), new FileNameExtensionFilter("anno", "ANNO"));
            lastPath = path.substring(0, path.lastIndexOf(File.separator));
            params.setInput(path);
        }
   }//GEN-LAST:event_loadButtonActionPerformed

   public void addPoint(float[] p)
   {
      infoLabel.setVisible(false);
      float[] oldCoords = params.getCoords();
      String[] oldTexts = params.getTexts();
      texts = new String[oldTexts.length + 1];
      coords = new float[oldCoords.length + 3];
      System.arraycopy(oldTexts, 0, texts, 1, oldTexts.length);
      System.arraycopy(oldCoords, 0, coords, 3, oldCoords.length);
      texts[0] = String.format("[%.3f, %.3f, %.3f]", p[0], p[1], p[2]);  
      System.arraycopy(p, 0, coords, 0, 3);
      params.setTexts(texts);
      params.setCoords(coords);
      update();
   }

   public void update()
   {
      coords = params.getCoords();
      texts = params.getTexts();
      annotationTableContent = new Object[texts.length][4];
      for (int i = 0; i < texts.length; i++)
      {
         annotationTableContent[i][0] = texts[i];
         for (int j = 0; j < 3; j++)
            annotationTableContent[i][j + 1] = coords[3 * i + j];
      }
      SwingInstancer.swingRunAndWait(new Runnable()
      {
         @Override
         public void run()
         {
            DefaultTableModel model = (DefaultTableModel) annoTable.getModel();
            model.setDataVector(annotationTableContent, annotationTableHeader);
            annoTable.repaint();
         }
      });
      params.setChange(Params.GLYPHS_CHANGED);
      params.fireStateChanged();
   }
   

   public void setParams(Params params)
   {
      this.params = params;
      fontGUI.setParams(params.getFontParams());
      activateBox.setSelected(params.getPick3DListener().isActive());
   }

   private void updateParams()
   {
      int nNodes = annoTable.getRowCount();
      coords = new float[3 * nNodes];
      texts = new String[nNodes];
      for (int i = 0; i < nNodes; i++)
      {
         texts[i] = (String)annoTable.getValueAt(i, 0);
         for (int j = 0; j < 3; j++)
            coords[3 * i + j] = (Float)annoTable.getValueAt(i, j + 1);
      }
      params.setTexts(texts);
      params.setCoords(coords);
      params.setChange(Params.GLYPHS_CHANGED);
      params.fireStateChanged();
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activateBox;
    private javax.swing.JTable annoTable;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton delButton;
    private javax.swing.Box.Filler filler1;
    private pl.edu.icm.visnow.geometries.gui.FontGUI fontGUI;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
