/* VisNow
 Copyright (C) 2006-2013 University of Warsaw, ICM

 This file is part of GNU Classpath.

 GNU Classpath is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.

 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the 
 University of Warsaw, Interdisciplinary Centre for Mathematical and 
 Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
 conditions of the GNU General Public License cover the whole
 combination.

 As a special exception, the copyright holders of this library give you
 permission to link this library with independent modules to produce an
 executable, regardless of the license terms of these independent
 modules, and to copy and distribute the resulting executable under
 terms of your choice, provided that you also meet, for each linked
 independent module, the terms and conditions of the license of that
 module.  An independent module is a module which is not derived from
 or based on this library.  If you modify this library, you may extend
 this exception to your version of the library, but you are not
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
package pl.edu.icm.visnow.lib.basic.mappers.ParallelCoordinates;


import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.datasets.Field;
import pl.edu.icm.visnow.datasets.RegularField;
import pl.edu.icm.visnow.geometries.parameters.AbstractRenderingParams;
import pl.edu.icm.visnow.geometries.parameters.DataMappingParams;

/**
 * @author Bartosz Borucki (babor@icm.edu.pl) Warsaw University,
 * Interdisciplinary Centre for Mathematical and Computational Modelling
 * 13 October 2013
 */
public class ParallelCoordinatesGUI extends javax.swing.JPanel {

    private ParallelCoordinatesParams params = new ParallelCoordinatesParams();
    private AbstractRenderingParams renderingParams;
    private DataMappingParams dataMappingParams;
    private Field field = null;
    boolean active = true;

    /**
     * Creates new form CoronaryRoiGUI
     */
    public ParallelCoordinatesGUI() {
        initComponents();
        downsizeRegularUI.setVisible(false);
        downsizeRegularUI.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                if (!active) return;
                params.setDownsize(downsizeRegularUI.getDownsize());                
            }
        });
        colorMappingPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        nVariablesSpinner = new javax.swing.JSpinner();
        downsizeIrregularUI = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        downsizeSpinner = new javax.swing.JSpinner();
        downsizeRegularUI = new pl.edu.icm.visnow.lib.gui.DownsizeUI();
        jLabel10 = new javax.swing.JLabel();
        geometry2DRB = new javax.swing.JRadioButton();
        geometry3DRB = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        selectionLogicCB = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        variablesPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        topParamsPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        scaleSlider = new javax.swing.JSlider();
        axesColorEditor = new pl.edu.icm.visnow.gui.widgets.ColorEditor();
        jLabel1 = new javax.swing.JLabel();
        planeTranspLabel = new javax.swing.JLabel();
        planeTranspSlider = new javax.swing.JSlider();
        selTranspLabel = new javax.swing.JLabel();
        selTranspSlider = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        selectionModeCB = new javax.swing.JComboBox();
        linesTypeLabel = new javax.swing.JLabel();
        linesTypeCB = new javax.swing.JComboBox();
        lineWidthLabel = new javax.swing.JLabel();
        lineWidthSlider = new javax.swing.JSlider();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        colorDirectRB = new javax.swing.JRadioButton();
        colorMapRB = new javax.swing.JRadioButton();
        directMappingPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        selectionColorEditor = new pl.edu.icm.visnow.gui.widgets.ColorEditor();
        jLabel4 = new javax.swing.JLabel();
        lineColorEditor = new pl.edu.icm.visnow.gui.widgets.ColorEditor();
        colorMappingPanel = new javax.swing.JPanel();
        componentMappingPanel = new pl.edu.icm.visnow.geometries.gui.ComponentColormappingPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        dimSlider = new javax.swing.JSlider();
        clipColorMapCB = new javax.swing.JCheckBox();
        fontPanel = new javax.swing.JPanel();
        fontGUI = new pl.edu.icm.visnow.geometries.gui.FontGUI();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel8.setText("# of variables:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 5, 0, 0);
        jPanel5.add(jLabel8, gridBagConstraints);

        nVariablesSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nVariablesSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel5.add(nVariablesSpinner, gridBagConstraints);

        downsizeIrregularUI.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("downsize:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        downsizeIrregularUI.add(jLabel9, gridBagConstraints);

        downsizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                downsizeSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        downsizeIrregularUI.add(downsizeSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(downsizeIrregularUI, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(downsizeRegularUI, gridBagConstraints);

        jLabel10.setText("plot type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel5.add(jLabel10, gridBagConstraints);

        buttonGroup2.add(geometry2DRB);
        geometry2DRB.setSelected(true);
        geometry2DRB.setText("2D");
        geometry2DRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geometry2DRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel5.add(geometry2DRB, gridBagConstraints);

        buttonGroup2.add(geometry3DRB);
        geometry3DRB.setText("3D");
        geometry3DRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geometry3DRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(geometry3DRB, gridBagConstraints);

        jLabel11.setText("selection logic:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel5.add(jLabel11, gridBagConstraints);

        selectionLogicCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "intersection (AND)", "union (OR)" }));
        selectionLogicCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionLogicCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(selectionLogicCB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel5, gridBagConstraints);

        variablesPanel.setLayout(new java.awt.GridBagLayout());
        jScrollPane1.setViewportView(variablesPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jTabbedPane1.addTab("compute", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        topParamsPanel.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("Axes distance:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        topParamsPanel.add(jLabel5, gridBagConstraints);

        scaleSlider.setPreferredSize(new java.awt.Dimension(36, 16));
        scaleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scaleSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        topParamsPanel.add(scaleSlider, gridBagConstraints);

        axesColorEditor.setColor(new java.awt.Color(255, 255, 255));
        axesColorEditor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                axesColorEditorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        topParamsPanel.add(axesColorEditor, gridBagConstraints);

        jLabel1.setText("Axes color:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        topParamsPanel.add(jLabel1, gridBagConstraints);

        planeTranspLabel.setText("Planes transparency:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        topParamsPanel.add(planeTranspLabel, gridBagConstraints);

        planeTranspSlider.setPreferredSize(new java.awt.Dimension(36, 16));
        planeTranspSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                planeTranspSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        topParamsPanel.add(planeTranspSlider, gridBagConstraints);

        selTranspLabel.setText("Selection area transp.:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        topParamsPanel.add(selTranspLabel, gridBagConstraints);

        selTranspSlider.setPreferredSize(new java.awt.Dimension(36, 16));
        selTranspSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selTranspSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        topParamsPanel.add(selTranspSlider, gridBagConstraints);

        jLabel6.setText("Selection mode:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        topParamsPanel.add(jLabel6, gridBagConstraints);

        selectionModeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "highlight selection", "highlight and limit selection", "limit selection" }));
        selectionModeCB.setPreferredSize(new java.awt.Dimension(40, 24));
        selectionModeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionModeCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        topParamsPanel.add(selectionModeCB, gridBagConstraints);

        linesTypeLabel.setText("3D lines type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        topParamsPanel.add(linesTypeLabel, gridBagConstraints);

        linesTypeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "line", "pipe" }));
        linesTypeCB.setEnabled(false);
        linesTypeCB.setPreferredSize(new java.awt.Dimension(40, 24));
        linesTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linesTypeCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        topParamsPanel.add(linesTypeCB, gridBagConstraints);

        lineWidthLabel.setText("Line/pipe width:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        topParamsPanel.add(lineWidthLabel, gridBagConstraints);

        lineWidthSlider.setPreferredSize(new java.awt.Dimension(36, 16));
        lineWidthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineWidthSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        topParamsPanel.add(lineWidthSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(topParamsPanel, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Data coloring:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel6.add(jLabel2, gridBagConstraints);

        buttonGroup1.add(colorDirectRB);
        colorDirectRB.setSelected(true);
        colorDirectRB.setText("direct");
        colorDirectRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorDirectRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel6.add(colorDirectRB, gridBagConstraints);

        buttonGroup1.add(colorMapRB);
        colorMapRB.setText("colormapped");
        colorMapRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMapRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(colorMapRB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(jPanel6, gridBagConstraints);

        directMappingPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Selection color:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        directMappingPanel.add(jLabel3, gridBagConstraints);

        selectionColorEditor.setColor(new java.awt.Color(255, 0, 0));
        selectionColorEditor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selectionColorEditorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        directMappingPanel.add(selectionColorEditor, gridBagConstraints);

        jLabel4.setText("Line color:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        directMappingPanel.add(jLabel4, gridBagConstraints);

        lineColorEditor.setColor(new java.awt.Color(0, 0, 255));
        lineColorEditor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineColorEditorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        directMappingPanel.add(lineColorEditor, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(directMappingPanel, gridBagConstraints);

        colorMappingPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        colorMappingPanel.add(componentMappingPanel, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel7.setText("Selection dimming:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(9, 5, 0, 0);
        jPanel4.add(jLabel7, gridBagConstraints);

        dimSlider.setPreferredSize(new java.awt.Dimension(36, 16));
        dimSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dimSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel4.add(dimSlider, gridBagConstraints);

        clipColorMapCB.setText("set colormap range to selection");
        clipColorMapCB.setEnabled(false);
        clipColorMapCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clipColorMapCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(clipColorMapCB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        colorMappingPanel.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(colorMappingPanel, gridBagConstraints);

        fontPanel.setLayout(new java.awt.GridBagLayout());

        fontGUI.setBorder(javax.swing.BorderFactory.createTitledBorder("font settings"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        fontPanel.add(fontGUI, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(fontPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(filler1, gridBagConstraints);

        jTabbedPane1.addTab("presentation", jPanel2);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void colorDirectRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorDirectRBActionPerformed
        if (!active) return;
        if (colorDirectRB.isSelected()) {
            params.setDataMapping(ParallelCoordinatesObject2D.DATA_MAPPING_DIRECT);
        }
        updateMappingGUI();
    }//GEN-LAST:event_colorDirectRBActionPerformed

    private void colorMapRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMapRBActionPerformed
        if (!active) return;
        if (colorMapRB.isSelected()) {
            params.setDataMapping(ParallelCoordinatesObject2D.DATA_MAPPING_COLORMAP);
        }
        updateMappingGUI();
    }//GEN-LAST:event_colorMapRBActionPerformed

    private void axesColorEditorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_axesColorEditorStateChanged
        if (!active) return;
        params.setAxesColor(axesColorEditor.getColor());
    }//GEN-LAST:event_axesColorEditorStateChanged

    private void lineColorEditorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lineColorEditorStateChanged
        if (!active) return;
        params.setLineColor(lineColorEditor.getColor());
    }//GEN-LAST:event_lineColorEditorStateChanged

    private void selectionColorEditorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selectionColorEditorStateChanged
        if (!active) return;
        params.setSelectionColor(selectionColorEditor.getColor());
    }//GEN-LAST:event_selectionColorEditorStateChanged

    private void scaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scaleSliderStateChanged
        if (!active) return;
        float v = 2.0f * (float) scaleSlider.getValue() / (float) (scaleSlider.getMaximum() - scaleSlider.getMinimum());
        params.setScale(v);
    }//GEN-LAST:event_scaleSliderStateChanged

    private void selectionModeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionModeCBActionPerformed
        if (!active) return;
        switch(selectionModeCB.getSelectedIndex()) {
            case 0:
                params.setSelectionType(ParallelCoordinatesObject2D.SELECTION_TYPE_HIGHLIGHT);
                break;
            case 1:
                params.setSelectionType(ParallelCoordinatesObject2D.SELECTION_TYPE_HIGHLIGHT_AND_LIMIT);
                break;
            case 2:
                params.setSelectionType(ParallelCoordinatesObject2D.SELECTION_TYPE_LIMIT);
                break;                
        }
        
    }//GEN-LAST:event_selectionModeCBActionPerformed

    private void dimSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dimSliderStateChanged
        if (!active) return;
        float v = (float) dimSlider.getValue() / 100.0f;
        params.setSelectionDim(v);        
    }//GEN-LAST:event_dimSliderStateChanged

    private void nVariablesSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nVariablesSpinnerStateChanged
        if (!active) return;
        int v = (Integer)nVariablesSpinner.getValue();
        if(v < 2) {
            nVariablesSpinner.setValue(2);
            return;
        }
        if(v != params.getNVariables())
            params.setNVariables(v);        
    }//GEN-LAST:event_nVariablesSpinnerStateChanged

    private void downsizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_downsizeSpinnerStateChanged
        if (!active) return;
        int v = (Integer)downsizeSpinner.getValue();
        if(v < 1) {
            downsizeSpinner.setValue(1);
            return;
        }
        int[] d = params.getDownsize();
        if(v != d[0]) {
            d[0] = v;
            params.setDownsize(d);
        }
    }//GEN-LAST:event_downsizeSpinnerStateChanged

    private void selectionLogicCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionLogicCBActionPerformed
        if (!active) return;
        switch(selectionLogicCB.getSelectedIndex()) {
            case 0:
                params.setSelectionLogic(ParallelCoordinatesParams.SELECTION_LOGIC_AND);
                break;
            case 1:
                params.setSelectionLogic(ParallelCoordinatesParams.SELECTION_LOGIC_OR);
                break;
        }
    }//GEN-LAST:event_selectionLogicCBActionPerformed

    private void clipColorMapCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clipColorMapCBActionPerformed
        if (!active) return;
        params.setClipColorRange(clipColorMapCB.isSelected());
    }//GEN-LAST:event_clipColorMapCBActionPerformed

    private void geometry3DRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geometry3DRBActionPerformed
        if (!active) return;
        params.setGeometryType(ParallelCoordinatesParams.GEOMETRY_TYPE_3D);
    }//GEN-LAST:event_geometry3DRBActionPerformed

    private void geometry2DRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geometry2DRBActionPerformed
        if (!active) return;
        params.setGeometryType(ParallelCoordinatesParams.GEOMETRY_TYPE_2D);
    }//GEN-LAST:event_geometry2DRBActionPerformed

    private void planeTranspSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_planeTranspSliderStateChanged
        if (!active) return;
        float v = (float) planeTranspSlider.getValue() / 100.0f;
        params.setPlanesTransparency(v);
    }//GEN-LAST:event_planeTranspSliderStateChanged

    private void selTranspSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selTranspSliderStateChanged
        if (!active) return;
        float v = (float) selTranspSlider.getValue() / 100.0f;
        params.setSelectionAreaTransparency(v);
    }//GEN-LAST:event_selTranspSliderStateChanged

    private void linesTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linesTypeCBActionPerformed
        if (!active) return;
        switch(linesTypeCB.getSelectedIndex()) {
            case 0:
                params.setLines3DType(ParallelCoordinatesObject3D.LINES3D_TYPE_LINES);
                break;
            case 1:
                params.setLines3DType(ParallelCoordinatesObject3D.LINES3D_TYPE_PIPES);
                break;                
        }
    }//GEN-LAST:event_linesTypeCBActionPerformed

    private void lineWidthSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lineWidthSliderStateChanged
        if (!active) return;
        float v = (float) lineWidthSlider.getValue() / 100.0f;
        params.setLineWidth(v);
    }//GEN-LAST:event_lineWidthSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pl.edu.icm.visnow.gui.widgets.ColorEditor axesColorEditor;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox clipColorMapCB;
    private javax.swing.JRadioButton colorDirectRB;
    private javax.swing.JRadioButton colorMapRB;
    private javax.swing.JPanel colorMappingPanel;
    private pl.edu.icm.visnow.geometries.gui.ComponentColormappingPanel componentMappingPanel;
    private javax.swing.JSlider dimSlider;
    private javax.swing.JPanel directMappingPanel;
    private javax.swing.JPanel downsizeIrregularUI;
    private pl.edu.icm.visnow.lib.gui.DownsizeUI downsizeRegularUI;
    private javax.swing.JSpinner downsizeSpinner;
    private javax.swing.Box.Filler filler1;
    private pl.edu.icm.visnow.geometries.gui.FontGUI fontGUI;
    private javax.swing.JPanel fontPanel;
    private javax.swing.JRadioButton geometry2DRB;
    private javax.swing.JRadioButton geometry3DRB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private pl.edu.icm.visnow.gui.widgets.ColorEditor lineColorEditor;
    private javax.swing.JLabel lineWidthLabel;
    private javax.swing.JSlider lineWidthSlider;
    private javax.swing.JComboBox linesTypeCB;
    private javax.swing.JLabel linesTypeLabel;
    private javax.swing.JSpinner nVariablesSpinner;
    private javax.swing.JLabel planeTranspLabel;
    private javax.swing.JSlider planeTranspSlider;
    private javax.swing.JSlider scaleSlider;
    private javax.swing.JLabel selTranspLabel;
    private javax.swing.JSlider selTranspSlider;
    private pl.edu.icm.visnow.gui.widgets.ColorEditor selectionColorEditor;
    private javax.swing.JComboBox selectionLogicCB;
    private javax.swing.JComboBox selectionModeCB;
    private javax.swing.JPanel topParamsPanel;
    private javax.swing.JPanel variablesPanel;
    // End of variables declaration//GEN-END:variables

    public void setParams(ParallelCoordinatesParams params, DataMappingParams dataMappingParams, AbstractRenderingParams renderingParams) {
        this.params = params;
        this.renderingParams = renderingParams;
        this.dataMappingParams = dataMappingParams;
        componentMappingPanel.setParams(dataMappingParams);
        componentMappingPanel.setParams(renderingParams);
        updateGUI();
    }

    private int[] defaultDownsize = null;;
    
    public void setInField(Field field) {
        this.field = field;
        active = false;
        params.setActiveValue(false);
        params.setParamaeterActive(false);
        
        int nNodes = field.getNNodes();
        int defaultNodes = 300;
        float down = 1;
        if(nNodes > defaultNodes)
            down = (float)nNodes/(float)defaultNodes;
        
        if(field instanceof RegularField) {
            int[] dims = ((RegularField)field).getDims();
            defaultDownsize = new int[dims.length];
            switch(dims.length) {
                case 3:
                    down = (float) Math.pow(down,1.0/3.0);
                    defaultDownsize[0] = (int)Math.ceil(down);
                    defaultDownsize[1] = (int)Math.ceil(down);
                    defaultDownsize[2] = (int)Math.ceil(down);
                    break;
                case 2:
                    down = (float) Math.sqrt(down);
                    defaultDownsize[0] = (int)Math.ceil(down);
                    defaultDownsize[1] = (int)Math.ceil(down);
                    break;
                case 1:
                    defaultDownsize[0] = (int)Math.ceil(down);
                    break;                    
            }
        } else {
            defaultDownsize = new int[1];
            defaultDownsize[0] = (int)Math.ceil(down);
        }
        params.setDownsize(defaultDownsize);
        params.setDefaultDownsize(defaultDownsize);
        componentMappingPanel.setData(field.getDataSchema());

        params.setParamaeterActive(true);
        params.setActiveValue(true);
        active = true;
        updateGUI();
    }

    public void updateGUI() {
        if (field == null || params == null) {
            nVariablesSpinner.setEnabled(false);
            downsizeSpinner.setEnabled(false);
            geometry2DRB.setEnabled(false);
            geometry3DRB.setEnabled(false);
            variablesPanel.removeAll();
            selectionLogicCB.setEnabled(false);
            downsizeRegularUI.setEnabled(false);
            colorMappingPanel.setVisible(false);
            fontPanel.setVisible(false);
            return;
        }
        active = false;

        nVariablesSpinner.setEnabled(true);
        downsizeSpinner.setEnabled(true);
        geometry2DRB.setEnabled(true);
        geometry3DRB.setEnabled(true);        
        selectionLogicCB.setEnabled(true);
        downsizeRegularUI.setEnabled(false);
        
        nVariablesSpinner.setValue(params.getNVariables());
        
        if(field instanceof RegularField) {
            downsizeIrregularUI.setVisible(false);
            downsizeRegularUI.setVisible(true);
            downsizeRegularUI.setDownsize(params.getDownsize(), defaultDownsize);            
        } else {
            downsizeIrregularUI.setVisible(true);
            downsizeRegularUI.setVisible(false);
            downsizeSpinner.setValue(params.getDownsize()[0]);
        }
        
        switch(params.getGeometryType()) {
            case ParallelCoordinatesParams.GEOMETRY_TYPE_2D:
                geometry2DRB.setSelected(true);
                break;
            case ParallelCoordinatesParams.GEOMETRY_TYPE_3D:
                geometry3DRB.setSelected(true);
                break;
        }
        switch(params.getSelectionLogic()) {
            case ParallelCoordinatesParams.SELECTION_LOGIC_AND:
                selectionLogicCB.setSelectedIndex(0);
                break;
            case ParallelCoordinatesParams.SELECTION_LOGIC_OR:
                selectionLogicCB.setSelectedIndex(1);
                break;
        }
        updateVariablesGUI();        
        
        updateMappingGUI();
        axesColorEditor.setColor(params.getAxesColor());
        lineColorEditor.setColor(params.getLineColor());
        selectionColorEditor.setColor(params.getSelectionColor());
        scaleSlider.setValue((int)((scaleSlider.getMaximum()-scaleSlider.getMinimum())*params.getScale()/2.0f));        
        switch(params.getSelectionType()) {
            case ParallelCoordinatesObject2D.SELECTION_TYPE_HIGHLIGHT:
                selectionModeCB.setSelectedIndex(0);
                break;
            case ParallelCoordinatesObject2D.SELECTION_TYPE_HIGHLIGHT_AND_LIMIT:
                selectionModeCB.setSelectedIndex(1);
                break;
            case ParallelCoordinatesObject2D.SELECTION_TYPE_LIMIT:
                selectionModeCB.setSelectedIndex(2);
                break;
        }
        dimSlider.setValue((int)(100.0f*params.getSelectionDim()));
        //clipColorMapCB.setSelected(params.isClipColorRange());
        
        switch(params.getGeometryType()) {
            case ParallelCoordinatesParams.GEOMETRY_TYPE_2D:
                planeTranspLabel.setVisible(false);
                planeTranspSlider.setVisible(false);
                selTranspLabel.setVisible(false);
                selTranspSlider.setVisible(false);
                linesTypeLabel.setVisible(false);
                linesTypeCB.setVisible(false);
                lineWidthLabel.setVisible(false);
                lineWidthSlider.setVisible(false);
                fontPanel.setVisible(false);
                break;
            case ParallelCoordinatesParams.GEOMETRY_TYPE_3D:
                planeTranspLabel.setVisible(true);
                planeTranspSlider.setValue((int)(100.0f*params.getPlanesTransparency()));
                planeTranspSlider.setVisible(true);
                selTranspLabel.setVisible(true);
                selTranspSlider.setValue((int)(100.0f*params.getSelectionAreaTransparency()));
                selTranspSlider.setVisible(true);
                linesTypeLabel.setVisible(true);
                linesTypeCB.setVisible(true);
                switch(params.getLines3DType()) {
                    case ParallelCoordinatesObject3D.LINES3D_TYPE_LINES:
                        linesTypeCB.setSelectedIndex(0);
                        break;
                    case ParallelCoordinatesObject3D.LINES3D_TYPE_PIPES:
                        linesTypeCB.setSelectedIndex(1);
                        break;
                }                
                lineWidthLabel.setVisible(true);
                lineWidthSlider.setVisible(true);
                lineWidthSlider.setValue((int)(100.0f*params.getLineWidth()));
                fontPanel.setVisible(true);
                break;                
        }
        fontGUI.setParams(params.getFontParams());
        
        active = true;
    }

    private void updateMappingGUI() {
        if(params.getDataMapping() == ParallelCoordinatesObject2D.DATA_MAPPING_DIRECT) {
            directMappingPanel.setVisible(true);
            colorMappingPanel.setVisible(false);
            colorDirectRB.setSelected(true);            
        } else {
            directMappingPanel.setVisible(false);
            colorMappingPanel.setVisible(true);
            colorMapRB.setSelected(true);
        }
    }

    ArrayList<VariablePanel> panels = new ArrayList<VariablePanel>();
    private boolean fromHere = false;
    ChangeListener panel2DListener = new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    ArrayList<PCVariable> variables = params.getVariables();
                    Variable2DPanel p = ((Variable2DPanel)e.getSource());
                    int n = p.getPosition();                    
                    PCVariable var = variables.get(n);
                    if(p.isResetRangeRequest()) {
                        var.setXMin(field.getData(p.getComponent()).getMinv());
                        var.setXMax(field.getData(p.getComponent()).getMaxv());
                        p.setRange(field.getData(p.getComponent()).getMinv(), field.getData(p.getComponent()).getMaxv(), true);
                        fromHere = true;
                    } else if(p.isRequestReordering()) {
                        int dir = p.getRequestReorderingDir();
                        switch(dir) {
                            case -1:
                                //move up
                                variables.remove(n);
                                variables.add(n-1, var);
                                break;
                            case 1:
                                //move down
                                variables.remove(n);
                                variables.add(n+1, var);                                
                                break;                                
                        }
                        p.reserReorderingRequest();
                    } else {
                        var.setXComponent(p.getComponent());
                        var.setXMin(p.getRangeMin());
                        var.setXLow(p.getRangeLow());
                        var.setXUp(p.getRangeUp());
                        var.setXMax(p.getRangeMax());
                        var.setXName(field.getData(p.getComponent()).getName());
                        var.setSelected(p.isSelected());
                        var.setVisible(p.isVisibleVariable());
                        fromHere = true;
                    }
                    params.setVariables(variables);
                }
            };

    ChangeListener panel3DListener = new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    ArrayList<PCVariable> variables = params.getVariables();
                    Variable3DPanel p = ((Variable3DPanel)e.getSource());
                    int n = p.getPosition();                    
                    PCVariable var = variables.get(n);
                    if(p.isResetRangeRequest()) {
                        var.setXMin(field.getData(p.getXComponent()).getMinv());
                        var.setXMax(field.getData(p.getXComponent()).getMaxv());
                        p.setXRange(field.getData(p.getXComponent()).getMinv(), field.getData(p.getXComponent()).getMaxv(), true);
                        var.setYMin(field.getData(p.getYComponent()).getMinv());
                        var.setYMax(field.getData(p.getYComponent()).getMaxv());
                        p.setYRange(field.getData(p.getYComponent()).getMinv(), field.getData(p.getYComponent()).getMaxv(), true);
                        fromHere = true;
                    } else if(p.isRequestReordering()) {
                        int dir = p.getRequestReorderingDir();
                        switch(dir) {
                            case -1:
                                //move up
                                variables.remove(n);
                                variables.add(n-1, var);
                                break;
                            case 1:
                                //move down
                                variables.remove(n);
                                variables.add(n+1, var);                                
                                break;                                
                        }
                        p.reserReorderingRequest();
                    } else {
                        var.setXComponent(p.getXComponent());
                        var.setYComponent(p.getYComponent());
                        var.setXMin(p.getXRangeMin());
                        var.setXLow(p.getXRangeLow());
                        var.setXUp(p.getXRangeUp());
                        var.setXMax(p.getXRangeMax());
                        var.setYMin(p.getYRangeMin());
                        var.setYLow(p.getYRangeLow());
                        var.setYUp(p.getYRangeUp());
                        var.setYMax(p.getYRangeMax());
                        var.setXName(field.getData(p.getXComponent()).getName());
                        var.setYName(field.getData(p.getYComponent()).getName());
                        var.setSelected(p.isSelected());
                        var.setVisible(p.isVisibleVariable());
                        fromHere = true;
                    }
                    params.setVariables(variables);
                }
            };
    
    public void updateVariablesGUI() {
        if(fromHere) {
            fromHere = false;
            return;
        }
        for (int i = 0; i < panels.size(); i++) {
            panels.get(i).removeChangeListener(panel2DListener);                       
            panels.get(i).removeChangeListener(panel3DListener);                       
        }
        variablesPanel.removeAll();
        panels.clear();
        
        int N = params.getNVariables();
        ArrayList<PCVariable> variables = params.getVariables();        
        GridBagConstraints gridBagConstraints;        
        if(params.getGeometryType() == ParallelCoordinatesParams.GEOMETRY_TYPE_2D) {
//            variablesPanel.setPreferredSize(new Dimension(180, N*150));
            for (int i = 0; i < N; i++) {
                Variable2DPanel panel = new Variable2DPanel();
                panel.setPosition(i, N);
                panel.setDataSchema(field.getDataSchema());
                panel.setComponent(variables.get(i).getXComponent(), true);
                panel.setSelected(variables.get(i).isSelected(), true);
                panel.setVisibleVariable(variables.get(i).isVisible(), true);
                panel.setRange(variables.get(i).getXMin(), variables.get(i).getXLow(), variables.get(i).getXUp(), variables.get(i).getXMax(), true);
//                panel.setMinimumSize(new java.awt.Dimension(180, 150));
//                panel.setPreferredSize(new java.awt.Dimension(180, 150));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = i;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
                gridBagConstraints.weightx = 1.0;
                panel.addChangeListener(panel2DListener);
                variablesPanel.add(panel, gridBagConstraints);
                panels.add(panel);
            }
        } else {
//            variablesPanel.setPreferredSize(new Dimension(180, N*300));            
            for (int i = 0; i < N; i++) {
                Variable3DPanel panel = new Variable3DPanel();
                panel.setPosition(i, N);
                panel.setDataSchema(field.getDataSchema());
                panel.setXComponent(variables.get(i).getXComponent(), true);
                panel.setYComponent(variables.get(i).getYComponent(), true);
                panel.setSelected(variables.get(i).isSelected(), true);
                panel.setVisibleVariable(variables.get(i).isVisible(), true);
                panel.setXRange(variables.get(i).getXMin(), variables.get(i).getXLow(), variables.get(i).getXUp(), variables.get(i).getXMax(), true);
                panel.setYRange(variables.get(i).getYMin(), variables.get(i).getYLow(), variables.get(i).getYUp(), variables.get(i).getYMax(), true);
//                panel.setMinimumSize(new java.awt.Dimension(180, 300));
//                panel.setPreferredSize(new java.awt.Dimension(180, 300));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = i;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
                gridBagConstraints.weightx = 1.0;
                panel.addChangeListener(panel3DListener);
                variablesPanel.add(panel, gridBagConstraints);
                panels.add(panel);
            }
        }        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = N;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        variablesPanel.add(new JPanel(), gridBagConstraints);
        variablesPanel.revalidate();
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
    }    
}


//dorobić checkboxy visible - żeby można było robić selekcje po zmiennej nie z wykresu
//sortowanie?
//przezroczystość linii?
//3D

