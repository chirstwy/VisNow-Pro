/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.mappers.DitheredGlyphs;

import java.awt.CardLayout;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.datasets.Field;
import pl.edu.icm.visnow.datasets.RegularField;
import pl.edu.icm.visnow.geometries.geometryTemplates.ScalarGlyphTemplates;
import pl.edu.icm.visnow.geometries.geometryTemplates.VectorGlyphTemplates;
import pl.edu.icm.visnow.geometries.gui.DataMappingGUI;
import pl.edu.icm.visnow.geometries.parameters.AbstractDataMappingParams;

/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends javax.swing.JPanel
{
   private Params params = new Params();
   private Field inField = null;
   private Hashtable<Integer, JLabel> downLabels = new Hashtable<Integer, JLabel>();
   private float smax = 1;
   private int[] downsize;


   /** Creates new form VNgraph3DUI */
   public GUI()
   {
      initComponents();
      mapComboBox.setAddNullComponent(true);
      mapComboBox.setTitle("glyph size component");
      regularFieldDownsizeUI.addChangeListener(new ChangeListener()
      {
         @Override
         public void stateChanged(ChangeEvent e)
         {
            params.setActive(false);
            params.setDown(regularFieldDownsizeUI.getDownsize());
            params.setActive(true);
         }
      });
      glyphComboBox.setModel(new javax.swing.DefaultComboBoxModel(ScalarGlyphTemplates.getGlyphNames()));
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        mapComboBox = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        glyphComboBox = new javax.swing.JComboBox();
        lodSlider = new javax.swing.JSlider();
        regularFieldDownsizeUI = new pl.edu.icm.visnow.lib.gui.DownsizeUI();
        densitySlider = new pl.edu.icm.visnow.gui.widgets.ExtendedSlider();
        functionComboBox = new javax.swing.JComboBox();
        scaleSlider = new pl.edu.icm.visnow.gui.widgets.ExtendedSlider();
        shakeSlider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        lineThicknessSlider = new javax.swing.JSlider();
        thrSlider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jPanel1 = new javax.swing.JPanel();
        cropUI = new pl.edu.icm.visnow.lib.gui.CropUI();
        jPanel6 = new javax.swing.JPanel();
        dataMappingGUI = new pl.edu.icm.visnow.geometries.gui.DataMappingGUI();

        setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        mapComboBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mapComboBoxStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(mapComboBox, gridBagConstraints);

        glyphComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "sphere", "cone", "diamond" }));
        glyphComboBox.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "glyph", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        glyphComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                glyphComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(glyphComboBox, gridBagConstraints);

        lodSlider.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        lodSlider.setMajorTickSpacing(5);
        lodSlider.setMaximum(20);
        lodSlider.setMinorTickSpacing(1);
        lodSlider.setPaintTicks(true);
        lodSlider.setSnapToTicks(true);
        lodSlider.setValue(1);
        lodSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "glyph smoothness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        lodSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lodSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(lodSlider, gridBagConstraints);

        regularFieldDownsizeUI.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                regularFieldDownsizeUIStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(regularFieldDownsizeUI, gridBagConstraints);

        densitySlider.setScaleType(pl.edu.icm.visnow.gui.widgets.ExtendedSlider.ScaleType.LOGARITHMIC);
        densitySlider.setShowingFields(false);
        densitySlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "glyph density", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        densitySlider.setMax(1.0F);
        densitySlider.setVal(0.1F);
        densitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                densitySliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(densitySlider, gridBagConstraints);

        functionComboBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        functionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "linear density map", "logarithmic density map", "square root density map", "arc tangens density map" }));
        functionComboBox.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "mapping data values to glyph density", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        functionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                functionComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(functionComboBox, gridBagConstraints);

        scaleSlider.setScaleType(pl.edu.icm.visnow.gui.widgets.ExtendedSlider.ScaleType.LOGARITHMIC);
        scaleSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "glyph scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        scaleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scaleSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(scaleSlider, gridBagConstraints);

        shakeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "glyphs shake", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        shakeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                shakeSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(shakeSlider, gridBagConstraints);

        lineThicknessSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "line thickness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        lineThicknessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineThicknessSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(lineThicknessSlider, gridBagConstraints);

        thrSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "threshold", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        thrSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thrSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(thrSlider, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(filler1, gridBagConstraints);

        jTabbedPane1.addTab("glyphs", jPanel4);

        jPanel1.setLayout(new java.awt.BorderLayout());

        cropUI.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        cropUI.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cropUIStateChanged(evt);
            }
        });
        jPanel1.add(cropUI, java.awt.BorderLayout.NORTH);

        jTabbedPane1.addTab("crop", jPanel1);

        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.add(dataMappingGUI, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("datamap", jPanel6);

        add(jTabbedPane1, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents
   

private void lodSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lodSliderStateChanged
   if (lodSlider.getValueIsAdjusting())
      return;
   params.setLod(lodSlider.getValue());
}//GEN-LAST:event_lodSliderStateChanged

   private void glyphComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_glyphComboBoxItemStateChanged
   {//GEN-HEADEREND:event_glyphComboBoxItemStateChanged
      params.setType(glyphComboBox.getSelectedIndex());
}//GEN-LAST:event_glyphComboBoxItemStateChanged

private void scaleSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_scaleSliderStateChanged
{//GEN-HEADEREND:event_scaleSliderStateChanged
   params.setScale(scaleSlider.getVal());
}//GEN-LAST:event_scaleSliderStateChanged

private void mapComboBoxStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_mapComboBoxStateChanged
{//GEN-HEADEREND:event_mapComboBoxStateChanged
   params.setActive(false);
   int m = mapComboBox.getComponent();
   params.setComponent(m);
   glyphComboBox.setModel(new javax.swing.DefaultComboBoxModel(ScalarGlyphTemplates.getGlyphNames()));
   mapComboBox.setScalarComponentsOnly(true);
   params.setType(glyphComboBox.getSelectedIndex());
   if (m >= 0)
   {
      thrSlider.setMin(inField.getData(m).getMinv());
      thrSlider.setMax(inField.getData(m).getMaxv());
      setScaleMinMax();
   }
   params.setActive(true);
}//GEN-LAST:event_mapComboBoxStateChanged

private void thrSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thrSliderStateChanged
   if (!thrSlider.isAdjusting())
      params.setThr(thrSlider.getVal());
}//GEN-LAST:event_thrSliderStateChanged

private void lineThicknessSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_lineThicknessSliderStateChanged
{//GEN-HEADEREND:event_lineThicknessSliderStateChanged
    params.setLineThickness(lineThicknessSlider.getValue()/10.f);
}//GEN-LAST:event_lineThicknessSliderStateChanged

private void cropUIStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_cropUIStateChanged
{//GEN-HEADEREND:event_cropUIStateChanged
   params.setCrop(cropUI.getLow(), cropUI.getUp());
}//GEN-LAST:event_cropUIStateChanged

private void regularFieldDownsizeUIStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_regularFieldDownsizeUIStateChanged
{//GEN-HEADEREND:event_regularFieldDownsizeUIStateChanged
   params.setDown(regularFieldDownsizeUI.getDownsize());
}//GEN-LAST:event_regularFieldDownsizeUIStateChanged

private void functionComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_functionComboBoxItemStateChanged
{//GEN-HEADEREND:event_functionComboBoxItemStateChanged
   params.setFunction(WIDTH);
}//GEN-LAST:event_functionComboBoxItemStateChanged

private void densitySliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_densitySliderStateChanged
{//GEN-HEADEREND:event_densitySliderStateChanged
   params.setDensity(densitySlider.getVal());
}//GEN-LAST:event_densitySliderStateChanged

private void shakeSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_shakeSliderStateChanged
{//GEN-HEADEREND:event_shakeSliderStateChanged
   params.setShake(shakeSlider.getVal());
}//GEN-LAST:event_shakeSliderStateChanged

private String[] lastInComponents = null;

   private boolean componentsChanged(String[] inComponents)
   {
      boolean changed = false;
      if (lastInComponents == null || lastInComponents.length != inComponents.length)
      {
         lastInComponents = inComponents;
         return true;
      }
      for (int i = 0; i < inComponents.length; i++)
         if (inComponents[i].compareTo(lastInComponents[i]) != 0)
            return true;
      return false;
   }

   public void setInData(Field inField,  AbstractDataMappingParams mapParams)
   {
      params.setActive(false);
      boolean dimsChanged = false;
      if (this.inField != null && this.inField instanceof RegularField && inField instanceof RegularField)
      {
         int[] d1 =((RegularField)this.inField).getDims();
         int[] d2 =((RegularField)inField).getDims();
         if (d1.length != d2.length)
            dimsChanged = true;
         else
            for (int i = 0; i < d2.length; i++)
               if (d1[i] != d2[i])
                  dimsChanged = true;
      }
      if (this.inField == null ||
         !this.inField.isStructureCompatibleWith(inField) ||
         !this.inField.isDataCompatibleWith(inField) ||
         this.inField.getNNodes() != inField.getNNodes() ||
         dimsChanged)
      {
         if (inField instanceof RegularField && 
            (this.inField == null || !(this.inField instanceof RegularField)) || dimsChanged)
         {
            RegularField regularInField = (RegularField) inField;
            if (regularInField.getDims() == null)
               return;
            int[] dims = regularInField.getDims();
            cropUI.setNewExtents(dims);
            params.setCrop(new int[dims.length], new int[dims.length]);
            for (int i = 0; i < dims.length; i++)
            {
               params.getUpCrop()[i] = dims[i];
               params.getLowCrop()[i] = 0;
            }
            int n = (int) (Math.pow(10000., 1. / dims.length));
            downsize = new int[dims.length];
            downsize[0] = (dims[0] + n - 1) / n;
            if (dims.length > 1)
               downsize[1] = (dims[1] + n - 1) / n;
            if (dims.length > 2)
               downsize[2] = (dims[2] + n - 1) / n;
            regularFieldDownsizeUI.setDownsize(downsize);
            regularFieldDownsizeUI.setVisible(true);
            cropUI.setVisible(true);
         }
      }

      this.inField = inField;
      String[] inComponents = new String[inField.getNData()];
      for (int i = 0; i < inField.getNData(); i++)
         inComponents[i] = inField.getData(i).getName();
      if (componentsChanged(inComponents))
      {
         mapComboBox.setDataSchema(inField.getSchema());
         params.setComponent(mapComboBox.getComponent());
         if (inField.getData(mapComboBox.getComponent()).getVeclen() == 1)
            glyphComboBox.setModel(new javax.swing.DefaultComboBoxModel(ScalarGlyphTemplates.getGlyphNames()));
         else
            glyphComboBox.setModel(new javax.swing.DefaultComboBoxModel(VectorGlyphTemplates.getGlyphNames()));
         params.setType(glyphComboBox.getSelectedIndex());
      }
      setScaleMinMax();
      dataMappingGUI.setInData(inField, mapParams);
      params.setActive(true);
   }

   private void setScaleMinMax()
   {
      float max = 1;
      float min = 0;
      if (inField.getData(params.getComponent()) != null)
      {
         max = inField.getData(params.getComponent()).getMaxv();
         min = inField.getData(params.getComponent()).getMinv();
      }
      float[][] ext = inField.getExtents();
      double diam = 0;
      for (int i = 0; i < 3; i++)
         diam += (ext[1][i] - ext[0][i]) * (ext[1][i] - ext[0][i]);
      if (max <= 0)
         max = .001f;
      smax = (float) (Math.sqrt(diam / 30) / max);
      scaleSlider.setMax(smax);
      scaleSlider.setMin(smax/100);
      scaleSlider.setVal(smax/10);
      //setter in logarithmic slider does not fire event so scale param needs to be updated as well
      params.setScale(smax/10);
   }

   private void setThicknessMinMax()
   {
      float[][] ext = inField.getExtents();
      double diam = 0;
      for (int i = 0; i < 3; i++)
         diam += (ext[1][i] - ext[0][i]) * (ext[1][i] - ext[0][i]);
      float sm = (float) (Math.sqrt(diam / 30));
   }

   public void setParams(Params params)
   {
      this.params = params;
   }

   public DataMappingGUI getDataMappingGUI()
   {
      return dataMappingGUI;
   }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private pl.edu.icm.visnow.lib.gui.CropUI cropUI;
    private pl.edu.icm.visnow.geometries.gui.DataMappingGUI dataMappingGUI;
    private pl.edu.icm.visnow.gui.widgets.ExtendedSlider densitySlider;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JComboBox functionComboBox;
    private javax.swing.JComboBox glyphComboBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSlider lineThicknessSlider;
    private javax.swing.JSlider lodSlider;
    private pl.edu.icm.visnow.lib.gui.DataComponentSelector mapComboBox;
    private pl.edu.icm.visnow.lib.gui.DownsizeUI regularFieldDownsizeUI;
    private pl.edu.icm.visnow.gui.widgets.ExtendedSlider scaleSlider;
    private pl.edu.icm.visnow.gui.widgets.FloatSlider shakeSlider;
    private pl.edu.icm.visnow.gui.widgets.FloatSlider thrSlider;
    // End of variables declaration//GEN-END:variables
}
