//<editor-fold defaultstate="collapsed" desc=" COPYRIGHT AND LICENSE ">
/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
University of Warsaw, Interdisciplinary Centre for Mathematical and
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */
//</editor-fold>

package pl.edu.icm.visnow.lib.basic.mappers.CityPlot;

import pl.edu.icm.visnow.datasets.RegularField;

/**
 *
 * @author Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends javax.swing.JPanel
{

   private RegularField inField = null;
   private Params params = new Params();
   private float smax;

   /**
    * Creates new form GUI
    */
   public GUI()
   {
      initComponents();
      xComponentSelector.setScalarComponentsOnly(true);
      yComponentSelector.setScalarComponentsOnly(true);
      xyComponentSelector.setScalarComponentsOnly(true);
      dataComponentSelector.setScalarComponentsOnly(true);
      dataComponentSelector.setTitle("graph component");
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      buttonGroup4 = new javax.swing.ButtonGroup();
      jTabbedPane1 = new javax.swing.JTabbedPane();
      squareBasePanel = new javax.swing.JPanel();
      xyComponentSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
      leftButton = new javax.swing.JRadioButton();
      centerButton = new javax.swing.JRadioButton();
      rightButton = new javax.swing.JRadioButton();
      jPanel7 = new javax.swing.JPanel();
      rectBasePanel = new javax.swing.JPanel();
      xComponentSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
      xLeftButton = new javax.swing.JRadioButton();
      xCenterButton = new javax.swing.JRadioButton();
      xRightButton = new javax.swing.JRadioButton();
      yComponentSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
      yLeftButton = new javax.swing.JRadioButton();
      yCenterButton = new javax.swing.JRadioButton();
      yRightButton = new javax.swing.JRadioButton();
      jPanel8 = new javax.swing.JPanel();
      scaleSlider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
      jPanel1 = new javax.swing.JPanel();
      jPanel3 = new javax.swing.JPanel();
      zeroBaseButton = new javax.swing.JRadioButton();
      minBaseButton = new javax.swing.JRadioButton();
      dataComponentSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
      jLabel1 = new javax.swing.JLabel();
      constantBasePanel = new javax.swing.JPanel();
      xBlockSlider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider();
      yBlockSlider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider();
      jPanel6 = new javax.swing.JPanel();

      jTabbedPane1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
      jTabbedPane1.setMinimumSize(new java.awt.Dimension(140, 250));
      jTabbedPane1.setPreferredSize(new java.awt.Dimension(250, 250));

      squareBasePanel.addComponentListener(new java.awt.event.ComponentAdapter()
      {
         public void componentShown(java.awt.event.ComponentEvent evt)
         {
            squareBasePanelComponentShown(evt);
         }
      });
      squareBasePanel.setLayout(new java.awt.GridBagLayout());

      xyComponentSelector.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            xyComponentSelectorStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      squareBasePanel.add(xyComponentSelector, gridBagConstraints);

      buttonGroup2.add(leftButton);
      leftButton.setText("left");
      leftButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            leftButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      squareBasePanel.add(leftButton, gridBagConstraints);

      buttonGroup2.add(centerButton);
      centerButton.setText("center");
      centerButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            centerButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      squareBasePanel.add(centerButton, gridBagConstraints);

      buttonGroup3.add(rightButton);
      rightButton.setText("right");
      rightButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            rightButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      squareBasePanel.add(rightButton, gridBagConstraints);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weighty = 1.0;
      squareBasePanel.add(jPanel7, gridBagConstraints);

      jTabbedPane1.addTab("1 comp. square", squareBasePanel);

      rectBasePanel.addComponentListener(new java.awt.event.ComponentAdapter()
      {
         public void componentShown(java.awt.event.ComponentEvent evt)
         {
            rectBasePanelComponentShown(evt);
         }
      });
      rectBasePanel.setLayout(new java.awt.GridBagLayout());

      xComponentSelector.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            xComponentSelectorStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      rectBasePanel.add(xComponentSelector, gridBagConstraints);

      buttonGroup3.add(xLeftButton);
      xLeftButton.setText("left");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      rectBasePanel.add(xLeftButton, gridBagConstraints);

      buttonGroup3.add(xCenterButton);
      xCenterButton.setSelected(true);
      xCenterButton.setText("center");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      rectBasePanel.add(xCenterButton, gridBagConstraints);

      buttonGroup3.add(xRightButton);
      xRightButton.setText("right");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      rectBasePanel.add(xRightButton, gridBagConstraints);

      yComponentSelector.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            yComponentSelectorStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      rectBasePanel.add(yComponentSelector, gridBagConstraints);

      buttonGroup4.add(yLeftButton);
      yLeftButton.setText("left");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      rectBasePanel.add(yLeftButton, gridBagConstraints);

      buttonGroup4.add(yCenterButton);
      yCenterButton.setSelected(true);
      yCenterButton.setText("center");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      rectBasePanel.add(yCenterButton, gridBagConstraints);

      buttonGroup4.add(yRightButton);
      yRightButton.setText("right");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      rectBasePanel.add(yRightButton, gridBagConstraints);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weighty = 1.0;
      rectBasePanel.add(jPanel8, gridBagConstraints);

      jTabbedPane1.addTab("2 comp. rect", rectBasePanel);

      setMinimumSize(new java.awt.Dimension(150, 580));
      setPreferredSize(new java.awt.Dimension(200, 600));
      setLayout(new java.awt.GridBagLayout());

      scaleSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("graph scale"));
      scaleSlider.setMinimumSize(new java.awt.Dimension(180, 65));
      scaleSlider.setPreferredSize(new java.awt.Dimension(200, 65));
      scaleSlider.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            scaleSliderStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      add(scaleSlider, gridBagConstraints);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 6;
      gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
      gridBagConstraints.weighty = 1.0;
      add(jPanel1, gridBagConstraints);

      jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("graph type"));
      jPanel3.setLayout(new java.awt.GridLayout(2, 2));

      buttonGroup1.add(zeroBaseButton);
      zeroBaseButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      zeroBaseButton.setSelected(true);
      zeroBaseButton.setText("zero based");
      zeroBaseButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            zeroBaseButtonActionPerformed(evt);
         }
      });
      jPanel3.add(zeroBaseButton);

      buttonGroup1.add(minBaseButton);
      minBaseButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      minBaseButton.setText("min based");
      minBaseButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            minBaseButtonActionPerformed(evt);
         }
      });
      jPanel3.add(minBaseButton);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      add(jPanel3, gridBagConstraints);

      dataComponentSelector.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            dataComponentSelectorStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      add(dataComponentSelector, gridBagConstraints);

      jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      jLabel1.setText("block relative dimension and position");
      jLabel1.setMaximumSize(new java.awt.Dimension(215, 25));
      jLabel1.setMinimumSize(new java.awt.Dimension(215, 25));
      jLabel1.setPreferredSize(new java.awt.Dimension(215, 25));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
      add(jLabel1, gridBagConstraints);

      constantBasePanel.setMinimumSize(new java.awt.Dimension(135, 150));
      constantBasePanel.addComponentListener(new java.awt.event.ComponentAdapter()
      {
         public void componentShown(java.awt.event.ComponentEvent evt)
         {
            constantBasePanelComponentShown(evt);
         }
      });
      constantBasePanel.setLayout(new java.awt.GridBagLayout());

      xBlockSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "x block size and position", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
      xBlockSlider.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
      xBlockSlider.setMaximum(1.0F);
      xBlockSlider.setMinimumSize(new java.awt.Dimension(60, 65));
      xBlockSlider.setPaintLabels(true);
      xBlockSlider.setPaintTicks(true);
      xBlockSlider.setPreferredSize(new java.awt.Dimension(200, 65));
      xBlockSlider.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            xBlockSliderStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      constantBasePanel.add(xBlockSlider, gridBagConstraints);

      yBlockSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "y block size and position", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
      yBlockSlider.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
      yBlockSlider.setMaximum(1.0F);
      yBlockSlider.setMinimumSize(new java.awt.Dimension(60, 65));
      yBlockSlider.setPaintLabels(true);
      yBlockSlider.setPaintTicks(true);
      yBlockSlider.setPreferredSize(new java.awt.Dimension(200, 65));
      yBlockSlider.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            yBlockSliderStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      constantBasePanel.add(yBlockSlider, gridBagConstraints);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weighty = 1.0;
      constantBasePanel.add(jPanel6, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      add(constantBasePanel, gridBagConstraints);
   }// </editor-fold>//GEN-END:initComponents

   private void scaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scaleSliderStateChanged
      params.setAdjusting(scaleSlider.isAdjusting());
      params.setScale(scaleSlider.getVal());
      params.fireStateChanged();
   }//GEN-LAST:event_scaleSliderStateChanged

private void dataComponentSelectorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_dataComponentSelectorStateChanged
{//GEN-HEADEREND:event_dataComponentSelectorStateChanged
   params.setComponent(dataComponentSelector.getComponent());
   setScaleMinMax();
   params.fireStateChanged();
}//GEN-LAST:event_dataComponentSelectorStateChanged

private void zeroBaseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_zeroBaseButtonActionPerformed
{//GEN-HEADEREND:event_zeroBaseButtonActionPerformed
   params.setZeroBased(zeroBaseButton.isSelected());
   params.fireStateChanged();
}//GEN-LAST:event_zeroBaseButtonActionPerformed

private void minBaseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_minBaseButtonActionPerformed
{//GEN-HEADEREND:event_minBaseButtonActionPerformed
   params.setZeroBased(zeroBaseButton.isSelected());
   params.fireStateChanged();
}//GEN-LAST:event_minBaseButtonActionPerformed

private void xyComponentSelectorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_xyComponentSelectorStateChanged
{//GEN-HEADEREND:event_xyComponentSelectorStateChanged
   params.setXYComponent(xyComponentSelector.getComponent());
   params.fireStateChanged();
}//GEN-LAST:event_xyComponentSelectorStateChanged

private void xComponentSelectorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_xComponentSelectorStateChanged
{//GEN-HEADEREND:event_xComponentSelectorStateChanged
   params.setXComponent(xComponentSelector.getComponent());
   params.fireStateChanged();
}//GEN-LAST:event_xComponentSelectorStateChanged

private void yComponentSelectorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_yComponentSelectorStateChanged
{//GEN-HEADEREND:event_yComponentSelectorStateChanged
   params.setYComponent(yComponentSelector.getComponent());
   params.fireStateChanged();
}//GEN-LAST:event_yComponentSelectorStateChanged

private void xBlockSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_xBlockSliderStateChanged
{//GEN-HEADEREND:event_xBlockSliderStateChanged
   params.setAdjusting(xBlockSlider.isAdjusting());
   params.setXRange(new float[]
           {xBlockSlider.getBottomValue(), xBlockSlider.getTopValue()});
   params.fireStateChanged();
}//GEN-LAST:event_xBlockSliderStateChanged

private void yBlockSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_yBlockSliderStateChanged
{//GEN-HEADEREND:event_yBlockSliderStateChanged
   params.setAdjusting(yBlockSlider.isAdjusting());
   params.setYRange(new float[]  {yBlockSlider.getBottomValue(), yBlockSlider.getTopValue() });
   params.fireStateChanged();   // TODO add your handling code here:
}//GEN-LAST:event_yBlockSliderStateChanged

private void leftButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_leftButtonActionPerformed
{//GEN-HEADEREND:event_leftButtonActionPerformed
   // TODO add your handling code here:
}//GEN-LAST:event_leftButtonActionPerformed

private void centerButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_centerButtonActionPerformed
{//GEN-HEADEREND:event_centerButtonActionPerformed
   // TODO add your handling code here:
}//GEN-LAST:event_centerButtonActionPerformed

private void rightButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rightButtonActionPerformed
{//GEN-HEADEREND:event_rightButtonActionPerformed
   // TODO add your handling code here:
}//GEN-LAST:event_rightButtonActionPerformed

   private void constantBasePanelComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_constantBasePanelComponentShown
   {//GEN-HEADEREND:event_constantBasePanelComponentShown
      params.setType(Params.CONSTANT);
   }//GEN-LAST:event_constantBasePanelComponentShown

   private void squareBasePanelComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_squareBasePanelComponentShown
   {//GEN-HEADEREND:event_squareBasePanelComponentShown
      params.setType(Params.SQUARE);
   }//GEN-LAST:event_squareBasePanelComponentShown

   private void rectBasePanelComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_rectBasePanelComponentShown
   {//GEN-HEADEREND:event_rectBasePanelComponentShown
     params.setType(Params.RECT);
   }//GEN-LAST:event_rectBasePanelComponentShown

   public void setInField(RegularField inField)
   {
      params.setActive(false);
      if (inField.getDims() == null || inField.getDims().length != 2)
         return;
      this.inField = inField;
      dataComponentSelector.setDataSchema(inField.getSchema());
      xComponentSelector.setDataSchema(inField.getSchema());
      yComponentSelector.setDataSchema(inField.getSchema());
      xyComponentSelector.setDataSchema(inField.getSchema());
      params.setComponent(0);
      setScaleMinMax();
      params.setActive(true);
   }

   private void setScaleMinMax()
   {
      float min = inField.getData(params.getComponent()).getMinv();
      float max = inField.getData(params.getComponent()).getMaxv();
      int[] dims = inField.getDims();
      if (max <= min)
         max = min + .001f;
      long k = Math.round(Math.log10(.5 * (dims[0] + dims[1]) / (max - min)));
      smax = 10.f;
      if (k > 0)
         for (int i = 0; i < k; i++)
            smax *= 10;
      else
         for (int i = 0; i < -k; i++)
            smax /= 10;
      scaleSlider.setMin(-smax);
      scaleSlider.setMax(smax);
      scaleSlider.setVal(0.1f * smax);
      params.setScale(scaleSlider.getVal());
   }

   public void setParams(Params params)
   {
      this.params = params;
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.ButtonGroup buttonGroup3;
   private javax.swing.ButtonGroup buttonGroup4;
   private javax.swing.JRadioButton centerButton;
   private javax.swing.JPanel constantBasePanel;
   private pl.edu.icm.visnow.lib.gui.DataComponentSelector dataComponentSelector;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel6;
   private javax.swing.JPanel jPanel7;
   private javax.swing.JPanel jPanel8;
   private javax.swing.JTabbedPane jTabbedPane1;
   private javax.swing.JRadioButton leftButton;
   private javax.swing.JRadioButton minBaseButton;
   private javax.swing.JPanel rectBasePanel;
   private javax.swing.JRadioButton rightButton;
   private pl.edu.icm.visnow.gui.widgets.FloatSlider scaleSlider;
   private javax.swing.JPanel squareBasePanel;
   private pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider xBlockSlider;
   private javax.swing.JRadioButton xCenterButton;
   private pl.edu.icm.visnow.lib.gui.DataComponentSelector xComponentSelector;
   private javax.swing.JRadioButton xLeftButton;
   private javax.swing.JRadioButton xRightButton;
   private pl.edu.icm.visnow.lib.gui.DataComponentSelector xyComponentSelector;
   private pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider yBlockSlider;
   private javax.swing.JRadioButton yCenterButton;
   private pl.edu.icm.visnow.lib.gui.DataComponentSelector yComponentSelector;
   private javax.swing.JRadioButton yLeftButton;
   private javax.swing.JRadioButton yRightButton;
   private javax.swing.JRadioButton zeroBaseButton;
   // End of variables declaration//GEN-END:variables
}
