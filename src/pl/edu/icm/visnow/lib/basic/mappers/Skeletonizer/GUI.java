//<editor-fold defaultstate="collapsed" desc=" COPYRIGHT AND LICENSE ">
/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
University of Warsaw, Interdisciplinary Centre for Mathematical and
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */
//</editor-fold>

package pl.edu.icm.visnow.lib.basic.mappers.Skeletonizer;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.datasets.RegularField;
import pl.edu.icm.visnow.datasets.dataarrays.DataArray;
import pl.edu.icm.visnow.lib.utils.events.MessagedChangeEvent;

/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends javax.swing.JPanel
{
   protected RegularField inField;
   protected Params params = new Params();
   protected DataArray segmentedData;
   protected ChangeListener activityListener = new ChangeListener()
      {
         public void stateChanged(ChangeEvent evt)
         {
            if (evt instanceof MessagedChangeEvent)
               activityLabel.setText(((MessagedChangeEvent)evt).getMessage());
         }
      };

   
   /** Creates new form SkeletonizerUI */
   public GUI()
   {
      initComponents();
      dataSelector.setScalarComponentsOnly(true);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        lineLenThrSlider = new javax.swing.JSlider();
        runButton = new javax.swing.JButton();
        setPane = new javax.swing.JScrollPane();
        setList = new javax.swing.JList();
        activityLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        dataSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        thrSlider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        aboveButton = new javax.swing.JRadioButton();
        belowButton = new javax.swing.JRadioButton();

        setMaximumSize(new java.awt.Dimension(300, 420));
        setMinimumSize(new java.awt.Dimension(200, 420));
        setName(""); // NOI18N
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(240, 420));
        setLayout(new java.awt.GridBagLayout());

        lineLenThrSlider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        lineLenThrSlider.setMajorTickSpacing(20);
        lineLenThrSlider.setMaximum(200);
        lineLenThrSlider.setMinorTickSpacing(5);
        lineLenThrSlider.setPaintLabels(true);
        lineLenThrSlider.setPaintTicks(true);
        lineLenThrSlider.setValue(30);
        lineLenThrSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("drop segments  under"));
        lineLenThrSlider.setMaximumSize(new java.awt.Dimension(32767, 81));
        lineLenThrSlider.setMinimumSize(new java.awt.Dimension(34, 61));
        lineLenThrSlider.setPreferredSize(new java.awt.Dimension(200, 71));
        lineLenThrSlider.setVerifyInputWhenFocusTarget(false);
        lineLenThrSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineLenThrSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(lineLenThrSlider, gridBagConstraints);

        runButton.setText("run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        add(runButton, gridBagConstraints);

        setPane.setMinimumSize(new java.awt.Dimension(170, 40));
        setPane.setPreferredSize(new java.awt.Dimension(200, 80));
        setPane.setRequestFocusEnabled(false);

        setList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { " ", " ", " ", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        setList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                setListValueChanged(evt);
            }
        });
        setPane.setViewportView(setList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(setPane, gridBagConstraints);

        activityLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        activityLabel.setText("inactive");
        activityLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        activityLabel.setMaximumSize(new java.awt.Dimension(48, 100));
        activityLabel.setMinimumSize(new java.awt.Dimension(48, 60));
        activityLabel.setPreferredSize(new java.awt.Dimension(48, 70));
        activityLabel.setRequestFocusEnabled(false);
        activityLabel.setVerifyInputWhenFocusTarget(false);
        activityLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 0, 3);
        add(activityLabel, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(jLabel1, gridBagConstraints);

        dataSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dataSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(dataSelector, gridBagConstraints);

        thrSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "skeletonize area over", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        thrSlider.setMax(255.0F);
        thrSlider.setMinimumSize(new java.awt.Dimension(90, 60));
        thrSlider.setPreferredSize(new java.awt.Dimension(200, 65));
        thrSlider.setVal(128.0F);
        thrSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thrSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(thrSlider, gridBagConstraints);

        buttonGroup1.add(aboveButton);
        aboveButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        aboveButton.setSelected(true);
        aboveButton.setText("above");
        aboveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(aboveButton, gridBagConstraints);

        buttonGroup1.add(belowButton);
        belowButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        belowButton.setText("below");
        belowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                belowButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(belowButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void runButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_runButtonActionPerformed
   {//GEN-HEADEREND:event_runButtonActionPerformed
      params.setRecompute(Params.SKELETONIZE);
      params.setActive(true);
}//GEN-LAST:event_runButtonActionPerformed

   private void setListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_setListValueChanged
   {//GEN-HEADEREND:event_setListValueChanged
      params.setSets(setList.getSelectedIndices());
   }//GEN-LAST:event_setListValueChanged

   private void lineLenThrSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_lineLenThrSliderStateChanged
   {//GEN-HEADEREND:event_lineLenThrSliderStateChanged
      if (!lineLenThrSlider.getValueIsAdjusting())
         params.setMinSegLen(lineLenThrSlider.getValue());
   }//GEN-LAST:event_lineLenThrSliderStateChanged

   private void thrSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_thrSliderStateChanged
   {//GEN-HEADEREND:event_thrSliderStateChanged
      if (!thrSlider.isAdjusting())
         params.setThreshold(thrSlider.getVal());
   }//GEN-LAST:event_thrSliderStateChanged

   private void dataSelectorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_dataSelectorStateChanged
   {//GEN-HEADEREND:event_dataSelectorStateChanged
      thrSlider.setMinMax(inField.getData(dataSelector.getComponent()).getMinv(), 
                           inField.getData(dataSelector.getComponent()).getMaxv());
      params.setComponent(dataSelector.getComponent()); 
   }//GEN-LAST:event_dataSelectorStateChanged

   private void aboveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboveButtonActionPerformed
   {//GEN-HEADEREND:event_aboveButtonActionPerformed
      params.setAbove(aboveButton.isSelected());
      thrSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(aboveButton.isSelected() ? "skeletonize area over" : "skeletonize area under"));
   }//GEN-LAST:event_aboveButtonActionPerformed

   private void belowButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_belowButtonActionPerformed
   {//GEN-HEADEREND:event_belowButtonActionPerformed
      params.setAbove(aboveButton.isSelected());
      thrSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(aboveButton.isSelected() ? "skeletonize area over" : "skeletonize area under")); 
   }//GEN-LAST:event_belowButtonActionPerformed

    public void setParams(Params params)
    {
        this.params = params;
    }

      /**
    * Set the value of segmentedData
    *
    * @param segmentedData new value of segmentedData
    */
   public void setSegmentedData(DataArray segmentedData)
   {
      this.segmentedData = segmentedData;
      String[] names = segmentedData.getUserData();
      if (names == null || names.length < 2 || !names[0].equalsIgnoreCase("MAP"))
      {
         params.setSegmented(false);
         thrSlider.setEnabled(true);
         thrSlider.setVisible(true);
         setPane.setVisible(false);
         params.setSets(null);
         return;
      }
      String[] listNames = new String[names.length-1];
      for (int i = 1; i < names.length; i++)
      {
         String[] item = names[i].split(":");
         if (item.length == 2)
            try
            {
               listNames[Integer.parseInt(item[0])] = item[1];
            } catch (Exception e)
            {
               System.out.println("bad item "+names[i]+" : "+item[0]+" cannot be parsed as int");
            }
      }
      setList.setListData(listNames);
      int[] sInd = new int[listNames.length-2];
      for (int i = 0; i < sInd.length; i++)
         sInd[i] = i+2;
      setList.setSelectedIndices(sInd);
      thrSlider.setVisible(false);
      setPane.setVisible(true);
      if (params != null)
      {
         params.setSegmented(true);
         params.setNSets(names.length);
         params.setSets(setList.getSelectedIndices());
      }
   }
   
   public void setInfield(RegularField inField)
   {
      this.inField = inField;
      dataSelector.setDataSchema(inField.getSchema());
      dataSelector.setSelectedIndex(0);
      thrSlider.setMinMax(inField.getData(dataSelector.getComponent()).getMinv(), 
                           inField.getData(dataSelector.getComponent()).getMaxv());
      params.setComponent(dataSelector.getComponent());
   }

   public ChangeListener getActivityListener()
   {
      return activityListener;
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton aboveButton;
    private javax.swing.JLabel activityLabel;
    private javax.swing.JRadioButton belowButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private pl.edu.icm.visnow.lib.gui.DataComponentSelector dataSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSlider lineLenThrSlider;
    private javax.swing.JButton runButton;
    private javax.swing.JList setList;
    private javax.swing.JScrollPane setPane;
    private pl.edu.icm.visnow.gui.widgets.FloatSlider thrSlider;
    // End of variables declaration//GEN-END:variables
   
}
