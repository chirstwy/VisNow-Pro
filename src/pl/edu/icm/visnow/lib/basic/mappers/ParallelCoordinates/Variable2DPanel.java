/* VisNow
 Copyright (C) 2006-2013 University of Warsaw, ICM

 This file is part of GNU Classpath.

 GNU Classpath is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.

 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the 
 University of Warsaw, Interdisciplinary Centre for Mathematical and 
 Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
 conditions of the GNU General Public License cover the whole
 combination.

 As a special exception, the copyright holders of this library give you
 permission to link this library with independent modules to produce an
 executable, regardless of the license terms of these independent
 modules, and to copy and distribute the resulting executable under
 terms of your choice, provided that you also meet, for each linked
 independent module, the terms and conditions of the license of that
 module.  An independent module is a module which is not derived from
 or based on this library.  If you modify this library, you may extend
 this exception to your version of the library, but you are not
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
package pl.edu.icm.visnow.lib.basic.mappers.ParallelCoordinates;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.basic.BasicArrowButton;
import pl.edu.icm.visnow.datasets.DataSchema;
import pl.edu.icm.visnow.datasets.dataarrays.DataArraySchema;

/**
 * @author Bartosz Borucki (babor@icm.edu.pl) Warsaw University,
 * Interdisciplinary Centre for Mathematical and Computational Modelling 13
 * October 2013
 */
public class Variable2DPanel extends javax.swing.JPanel implements VariablePanel {

    private int position = 0;
    private int positions = 1;
    private DataSchema schema = null;
    private boolean silent = false;
    private ParallelCoordinatesParams params = null;
    private boolean resetRangeRequest = false;

    /**
     * Creates new form Variable2DPanel
     */
    public Variable2DPanel() {
        initComponents();
        ((TitledBorder)getBorder()).setBorder(new LineBorder(Color.BLACK, 2));
        
        initButtons();
        componentChooser.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (schema == null) {
                    return;
                }

                boolean oldSilent = silent;
                silent = true;
                DataArraySchema das = schema.getSchema(componentChooser.getComponent());
                rangeSlider.setMinMax(das.getMinv(), das.getMaxv());
                rangeSlider.setLow(das.getMinv());
                rangeSlider.setUp(das.getMaxv());
                silent = oldSilent;
                fireStateChanged();
            }
        });
    }

    public void setParams(ParallelCoordinatesParams params) {
        this.params = params;
        updateGUI();
    }

    public void setTitle(String title) {
        Border b = getBorder();
        if (b instanceof TitledBorder) {
            ((TitledBorder) b).setTitle(title);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        componentChooser = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        rangeSlider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider();
        selectCB = new javax.swing.JCheckBox();
        visibleCB = new javax.swing.JCheckBox();
        resetRangeButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("variable"));
        setLayout(new java.awt.GridBagLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(22, 2147483647));
        jPanel1.setMinimumSize(new java.awt.Dimension(22, 80));
        jPanel1.setPreferredSize(new java.awt.Dimension(22, 80));
        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        componentChooser.setScalarComponentsOnly(true);
        componentChooser.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                componentChooserStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(componentChooser, gridBagConstraints);

        rangeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("range"));
        rangeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(rangeSlider, gridBagConstraints);

        selectCB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        selectCB.setText("select");
        selectCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(selectCB, gridBagConstraints);

        visibleCB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        visibleCB.setText("visible");
        visibleCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibleCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(visibleCB, gridBagConstraints);

        resetRangeButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        resetRangeButton.setText("reset range");
        resetRangeButton.setMargin(new java.awt.Insets(2, 4, 2, 4));
        resetRangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetRangeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(resetRangeButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void componentChooserStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_componentChooserStateChanged
    }//GEN-LAST:event_componentChooserStateChanged

    private void rangeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeSliderStateChanged
        fireStateChanged();
    }//GEN-LAST:event_rangeSliderStateChanged

    private void selectCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCBActionPerformed
        fireStateChanged();
    }//GEN-LAST:event_selectCBActionPerformed

    private void visibleCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibleCBActionPerformed
        fireStateChanged();
    }//GEN-LAST:event_visibleCBActionPerformed

    private void resetRangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetRangeButtonActionPerformed
        resetRangeRequest = true;
        fireStateChanged();
    }//GEN-LAST:event_resetRangeButtonActionPerformed
    private boolean requestReordering = false;
    private int requestReorderingDir = 0;

    public void reserReorderingRequest() {
        requestReordering = false;
        requestReorderingDir = 0;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pl.edu.icm.visnow.lib.gui.DataComponentSelector componentChooser;
    private javax.swing.JPanel jPanel1;
    private pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider rangeSlider;
    private javax.swing.JButton resetRangeButton;
    private javax.swing.JCheckBox selectCB;
    private javax.swing.JCheckBox visibleCB;
    // End of variables declaration//GEN-END:variables
    
    private BasicArrowButton upButton;
    private BasicArrowButton downButton;
    
    /**
     * Utility field holding list of ChangeListeners.
     */
    protected transient ArrayList<ChangeListener> changeListenerList = new ArrayList<ChangeListener>();

    /**
     * Registers ChangeListener to receive events.
     * <p/>
     * @param listener The listener to register.
     */
    @Override
    public synchronized void addChangeListener(ChangeListener listener) {
        changeListenerList.add(listener);
    }

    /**
     * Removes ChangeListener from the list of listeners.
     * <p/>
     * @param listener The listener to remove.
     */
    @Override
    public synchronized void removeChangeListener(ChangeListener listener) {
        changeListenerList.remove(listener);
    }

    /**
     * Notifies all registered listeners about the event (calls
     * <code>stateChanged()</code> on each listener in
     * <code>changeListenerList</code>).
     */
    public void fireStateChanged() {
        if (silent) {
            return;
        }
        ChangeEvent e = new ChangeEvent(this);
        for (int i = 0; i < changeListenerList.size(); i++) {
            changeListenerList.get(i).stateChanged(e);
        }
    }

    public void setDataSchema(DataSchema schema) {
        this.schema = schema;
        componentChooser.setDataSchema(schema);
    }

    public int getComponent() {
        return componentChooser.getComponent();
    }

    public void setComponent(int component, boolean silent) {
        boolean oldSilent = this.silent;
        this.silent = silent;
        componentChooser.setComponent(component);
        this.silent = oldSilent;
    }

    public float[] getRange() {
        float[] out = new float[4];
        out[0] = rangeSlider.getMin();
        out[1] = rangeSlider.getLow();
        out[2] = rangeSlider.getUp();
        out[3] = rangeSlider.getMax();
        return out;
    }

    public void setRange(float[] range, boolean silent) {
        boolean oldSilent = this.silent;
        this.silent = silent;
        rangeSlider.setMinMax(range[0], range[3]);
        rangeSlider.setLow(range[1]);
        rangeSlider.setUp(range[2]);
        this.silent = oldSilent;
    }

    public void setRange(float min, float low, float up, float max, boolean silent) {
        boolean oldSilent = this.silent;
        this.silent = silent;
        rangeSlider.setMinMax(min, max);
        rangeSlider.setLow(low);
        rangeSlider.setUp(up);
        this.silent = oldSilent;
    }

    public void setRange(float min, float max, boolean silent) {
        boolean oldSilent = this.silent;
        this.silent = silent;
        rangeSlider.setMinMax(min, max);
        this.silent = oldSilent;
    }
    
    public float getRangeMin() {
        return rangeSlider.getMin();
    }

    public float getRangeLow() {
        return rangeSlider.getLow();
    }

    public float getRangeUp() {
        return rangeSlider.getUp();
    }

    public float getRangeMax() {
        return rangeSlider.getMax();
    }

    public boolean isSelected() {
        return selectCB.isSelected();
    }
    
    public void setSelected(boolean selected, boolean silent) {
        boolean oldSilent = this.silent;
        this.silent = silent;
        selectCB.setSelected(selected);
        this.silent = oldSilent;
    }

    public boolean isVisibleVariable() {
        return visibleCB.isSelected();
    }
    
    public void setVisibleVariable(boolean visible, boolean silent) {
        boolean oldSilent = this.silent;
        this.silent = silent;
        visibleCB.setSelected(visible);
        this.silent = oldSilent;
    }
    
    /**
     * @return the position
     */
    public int getPosition() {
        return position;
    }

    /**
     * @param position the position to set
     */
    public void setPosition(int position, int totalPositions) {
        this.position = position;
        this.positions = totalPositions;
        updateButtons();
    }

    private void updateGUI() {
        if (params == null) {
            return;
        }




    }

    private void updateButtons() {
        upButton.setEnabled(position != 0);
        downButton.setEnabled(position != positions - 1);
    }

    /**
     * @return the requestReordering
     */
    public boolean isRequestReordering() {
        return requestReordering;
    }

    /**
     * @return the requestReorderingDir
     */
    public int getRequestReorderingDir() {
        return requestReorderingDir;
    }

    private void initButtons() {
        upButton = new BasicArrowButton(BasicArrowButton.NORTH);
        upButton.setMaximumSize(new java.awt.Dimension(22, 40));
        upButton.setMinimumSize(new java.awt.Dimension(22, 40));
        upButton.setPreferredSize(new java.awt.Dimension(22, 40));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestReordering = true;
                requestReorderingDir = -1;
                fireStateChanged();
            }
        });
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(upButton, gridBagConstraints);

        downButton = new BasicArrowButton(BasicArrowButton.SOUTH);
        downButton.setMaximumSize(new java.awt.Dimension(22, 40));
        downButton.setMinimumSize(new java.awt.Dimension(22, 40));
        downButton.setPreferredSize(new java.awt.Dimension(22, 40));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestReordering = true;
                requestReorderingDir = 1;
                fireStateChanged();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(downButton, gridBagConstraints);


    }

    /**
     * @return the resetRangeRequest
     */
    public boolean isResetRangeRequest() {
        boolean out = resetRangeRequest;
        resetRangeRequest = false;
        return out;
    }
}
