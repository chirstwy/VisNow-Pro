//<editor-fold defaultstate="collapsed" desc=" COPYRIGHT AND LICENSE ">
/* VisNow
Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
University of Warsaw, Interdisciplinary Centre for Mathematical and
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version.
*/
//</editor-fold>


package pl.edu.icm.visnow.lib.basic.mappers.Isovolume;

import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.datasets.Field;
import pl.edu.icm.visnow.datasets.dataarrays.DataArray;
import pl.edu.icm.visnow.lib.templates.visualization.guis.VariablePresentation;
import pl.edu.icm.visnow.gui.events.BooleanChangeListener;
import pl.edu.icm.visnow.gui.events.BooleanEvent;

/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends JPanel implements VariablePresentation
{

   private Field inField = null;
   private Params params = new Params();
   private float vMin = 0, vMax = 255;
   private float physMin = 0, physMax = 255;
   private boolean syncing = false;
   private BooleanChangeListener presentationListener = new BooleanChangeListener()  
   {        
      @Override
      public void booleanChanged(BooleanEvent e)
      {
         setPresentation(e.getState());
      }
      @Override
      public void stateChanged(ChangeEvent e)
      {
      }
   };

   /** Creates new form IsosurfaceUI */
   public GUI()
   {
      initComponents();
      isoComponentSelector.setScalarComponentsOnly(true);
      isoComponentSelector.setTitle("threshold component");
      isoComponentSelector.addChangeListener(new ChangeListener()
      {
         @Override
         public void stateChanged(ChangeEvent evt)
         {
            if (syncing) return;
            syncing = true;
            boolean oldActive = params.isActive();
            params.setActive(false);
            int k = isoComponentSelector.getComponent();
            params.setIsoComponent(k);
            if (k != -1)
               setComponent(k);
            params.setActive(oldActive);
            syncing = false;
         }
      });
      
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        isoComponentSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        thresholdSlider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        jPanel3 = new javax.swing.JPanel();
        belowButton = new javax.swing.JRadioButton();
        aboveButton = new javax.swing.JRadioButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setLayout(new java.awt.GridBagLayout());

        isoComponentSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                isoComponentSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(isoComponentSelector, gridBagConstraints);

        thresholdSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "threshold", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        thresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(thresholdSlider, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        buttonGroup1.add(belowButton);
        belowButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pl/edu/icm/visnow/lib/basic/mappers/PlanarSlice/Bundle"); // NOI18N
        belowButton.setText(bundle.getString("GUI.belowButton.text")); // NOI18N
        belowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                belowButtonActionPerformed(evt);
            }
        });
        jPanel3.add(belowButton);

        buttonGroup1.add(aboveButton);
        aboveButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        aboveButton.setSelected(true);
        aboveButton.setText(bundle.getString("GUI.aboveButton.text")); // NOI18N
        aboveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboveButtonActionPerformed(evt);
            }
        });
        jPanel3.add(aboveButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weighty = 1.0;
        add(filler1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void isoComponentSelectorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_isoComponentSelectorStateChanged
   {//GEN-HEADEREND:event_isoComponentSelectorStateChanged
      params.setActive(false);
      params.setIsoComponent(isoComponentSelector.getComponent());
      setComponent(isoComponentSelector.getComponent());
      params.setActive(true);
   }//GEN-LAST:event_isoComponentSelectorStateChanged

   private void thresholdSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_thresholdSliderStateChanged
   {//GEN-HEADEREND:event_thresholdSliderStateChanged
      if (!thresholdSlider.isAdjusting())
         params.setThreshold(thresholdSlider.getVal());
   }//GEN-LAST:event_thresholdSliderStateChanged

   private void belowButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_belowButtonActionPerformed
   {//GEN-HEADEREND:event_belowButtonActionPerformed
      setPosition();
   }//GEN-LAST:event_belowButtonActionPerformed

   private void aboveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboveButtonActionPerformed
   {//GEN-HEADEREND:event_aboveButtonActionPerformed
      setPosition();
   }//GEN-LAST:event_aboveButtonActionPerformed

   private void setPosition()
   {
      if (belowButton.isSelected()) 
         params.setType(-1);
      else  
         params.setType(1);
   }
   

   /**
    * Setter for property inField.
    * @param inField New value of property inField.
    */
   public void setInField(Field inField)
   {
      params.setActive(false);
      this.inField = inField;
      isoComponentSelector.setDataSchema(inField.getSchema());
      int k = -1;
      for (int i = 0; i < inField.getNData(); i++)
         if (inField.getData(i).isSimpleNumeric() && inField.getData(i).getVeclen() == 1)
         {
            k = i;
            break;
         }
      setComponent(k);
      params.setActive(true);
   }
   
   private void setComponent(int k)
   {
      DataArray da = inField.getData(k);
      vMin = da.getMinv();
      vMax = da.getMaxv();
      physMin = da.getPhysMin();
      physMax = da.getPhysMax();
      thresholdSlider.setMinMax(vMin, vMax);
      params.setIsoComponent(k);
   }
   
   public void setParams(Params params)
   {
      this.params = params;
   }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JRadioButton aboveButton;
    public javax.swing.JRadioButton belowButton;
    public javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.Box.Filler filler1;
    public pl.edu.icm.visnow.lib.gui.DataComponentSelector isoComponentSelector;
    public javax.swing.JPanel jPanel3;
    public pl.edu.icm.visnow.gui.widgets.FloatSlider thresholdSlider;
    // End of variables declaration//GEN-END:variables

   @Override
   public BooleanChangeListener getPresentationListener()
   {
      return presentationListener;
   }

   @Override
   public void setPresentation(boolean simple)
   {
   }
}
